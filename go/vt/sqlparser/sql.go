// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// skipToEnd forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling skipToEnd will make the lexer
// return EOF early.
func skipToEnd(yylex interface{}) {
	yylex.(*Tokenizer).SkipToEnd = true
}

//line sql.y:53
type yySymType struct {
	yys                  int
	empty                struct{}
	statement            Statement
	selStmt              SelectStatement
	ddl                  *DDL
	ins                  *Insert
	byt                  byte
	bytes                []byte
	bytes2               [][]byte
	str                  string
	strs                 []string
	selectExprs          SelectExprs
	selectExpr           SelectExpr
	columns              Columns
	partitions           Partitions
	colName              *ColName
	tableExprs           TableExprs
	tableExpr            TableExpr
	joinCondition        JoinCondition
	tableName            TableName
	tableNames           TableNames
	indexHints           *IndexHints
	expr                 Expr
	exprs                Exprs
	boolVal              BoolVal
	sqlVal               *SQLVal
	colTuple             ColTuple
	values               Values
	valTuple             ValTuple
	subquery             *Subquery
	whens                []*When
	when                 *When
	orderBy              OrderBy
	order                *Order
	limit                *Limit
	updateExprs          UpdateExprs
	setExprs             SetExprs
	updateExpr           *UpdateExpr
	setExpr              *SetExpr
	colIdent             ColIdent
	tableIdent           TableIdent
	convertType          *ConvertType
	aliasedTableName     *AliasedTableExpr
	TableSpec            *TableSpec
	alterSpec            *AlterSpec
	alterSpecs           []*AlterSpec
	columnType           ColumnType
	colKeyOpt            ColumnKeyOption
	optVal               Expr
	LengthScaleOption    LengthScaleOption
	columnDefinition     *ColumnDefinition
	columnDefinitions    []*ColumnDefinition
	indexDefinition      *IndexDefinition
	indexInfo            *IndexInfo
	indexOption          *IndexOption
	indexOptions         []*IndexOption
	indexColumn          *IndexColumn
	indexColumns         []*IndexColumn
	constraintDefinition *ConstraintDefinition
	constraintInfo       ConstraintInfo
	ReferenceAction      ReferenceAction
	partDefs             []*PartitionDefinition
	partDef              *PartitionDefinition
	partSpec             *PartitionSpec
	vindexParam          VindexParam
	vindexParams         []VindexParam
	showFilter           *ShowFilter
	optLike              *OptLike
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const KEY = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const UNLOCK = 57374
const KEYS = 57375
const DISTINCTROW = 57376
const VALUES = 57377
const LAST_INSERT_ID = 57378
const NEXT = 57379
const VALUE = 57380
const SHARE = 57381
const MODE = 57382
const SQL_NO_CACHE = 57383
const SQL_CACHE = 57384
const JOIN = 57385
const STRAIGHT_JOIN = 57386
const LEFT = 57387
const RIGHT = 57388
const INNER = 57389
const OUTER = 57390
const CROSS = 57391
const NATURAL = 57392
const USE = 57393
const FORCE = 57394
const ON = 57395
const USING = 57396
const ID = 57397
const HEX = 57398
const STRING = 57399
const INTEGRAL = 57400
const FLOAT = 57401
const HEXNUM = 57402
const VALUE_ARG = 57403
const LIST_ARG = 57404
const COMMENT = 57405
const COMMENT_KEYWORD = 57406
const BIT_LITERAL = 57407
const NULL = 57408
const TRUE = 57409
const FALSE = 57410
const OFF = 57411
const OR = 57412
const AND = 57413
const NOT = 57414
const BETWEEN = 57415
const CASE = 57416
const WHEN = 57417
const THEN = 57418
const ELSE = 57419
const END = 57420
const LE = 57421
const GE = 57422
const NE = 57423
const NULL_SAFE_EQUAL = 57424
const IS = 57425
const LIKE = 57426
const REGEXP = 57427
const IN = 57428
const SHIFT_LEFT = 57429
const SHIFT_RIGHT = 57430
const DIV = 57431
const MOD = 57432
const UNARY = 57433
const COLLATE = 57434
const BINARY = 57435
const UNDERSCORE_BINARY = 57436
const UNDERSCORE_UTF8MB4 = 57437
const INTERVAL = 57438
const JSON_EXTRACT_OP = 57439
const JSON_UNQUOTE_EXTRACT_OP = 57440
const CREATE = 57441
const ALTER = 57442
const DROP = 57443
const RENAME = 57444
const ANALYZE = 57445
const ADD = 57446
const FLUSH = 57447
const SCHEMA = 57448
const TABLE = 57449
const INDEX = 57450
const VIEW = 57451
const TO = 57452
const IGNORE = 57453
const IF = 57454
const UNIQUE = 57455
const PRIMARY = 57456
const COLUMN = 57457
const SPATIAL = 57458
const FULLTEXT = 57459
const KEY_BLOCK_SIZE = 57460
const CHECK = 57461
const ACTION = 57462
const CASCADE = 57463
const CONSTRAINT = 57464
const FOREIGN = 57465
const NO = 57466
const REFERENCES = 57467
const RESTRICT = 57468
const SHOW = 57469
const DESCRIBE = 57470
const EXPLAIN = 57471
const DATE = 57472
const ESCAPE = 57473
const REPAIR = 57474
const OPTIMIZE = 57475
const TRUNCATE = 57476
const MAXVALUE = 57477
const PARTITION = 57478
const REORGANIZE = 57479
const LESS = 57480
const THAN = 57481
const PROCEDURE = 57482
const TRIGGER = 57483
const VINDEX = 57484
const VINDEXES = 57485
const STATUS = 57486
const VARIABLES = 57487
const WARNINGS = 57488
const SEQUENCE = 57489
const BEGIN = 57490
const START = 57491
const TRANSACTION = 57492
const COMMIT = 57493
const ROLLBACK = 57494
const BIT = 57495
const TINYINT = 57496
const SMALLINT = 57497
const MEDIUMINT = 57498
const INT = 57499
const INTEGER = 57500
const BIGINT = 57501
const INTNUM = 57502
const REAL = 57503
const DOUBLE = 57504
const FLOAT_TYPE = 57505
const DECIMAL = 57506
const NUMERIC = 57507
const TIME = 57508
const TIMESTAMP = 57509
const DATETIME = 57510
const YEAR = 57511
const CHAR = 57512
const VARCHAR = 57513
const BOOL = 57514
const CHARACTER = 57515
const VARBINARY = 57516
const NCHAR = 57517
const TEXT = 57518
const TINYTEXT = 57519
const MEDIUMTEXT = 57520
const LONGTEXT = 57521
const BLOB = 57522
const TINYBLOB = 57523
const MEDIUMBLOB = 57524
const LONGBLOB = 57525
const JSON = 57526
const ENUM = 57527
const GEOMETRY = 57528
const POINT = 57529
const LINESTRING = 57530
const POLYGON = 57531
const GEOMETRYCOLLECTION = 57532
const MULTIPOINT = 57533
const MULTILINESTRING = 57534
const MULTIPOLYGON = 57535
const NULLX = 57536
const AUTO_INCREMENT = 57537
const APPROXNUM = 57538
const SIGNED = 57539
const UNSIGNED = 57540
const ZEROFILL = 57541
const COLLATION = 57542
const DATABASES = 57543
const TABLES = 57544
const VITESS_METADATA = 57545
const VSCHEMA = 57546
const FULL = 57547
const PROCESSLIST = 57548
const COLUMNS = 57549
const FIELDS = 57550
const ENGINES = 57551
const PLUGINS = 57552
const NAMES = 57553
const CHARSET = 57554
const GLOBAL = 57555
const SESSION = 57556
const ISOLATION = 57557
const LEVEL = 57558
const READ = 57559
const WRITE = 57560
const ONLY = 57561
const REPEATABLE = 57562
const COMMITTED = 57563
const UNCOMMITTED = 57564
const SERIALIZABLE = 57565
const CURRENT_TIMESTAMP = 57566
const DATABASE = 57567
const CURRENT_DATE = 57568
const CURRENT_TIME = 57569
const LOCALTIME = 57570
const LOCALTIMESTAMP = 57571
const UTC_DATE = 57572
const UTC_TIME = 57573
const UTC_TIMESTAMP = 57574
const REPLACE = 57575
const CONVERT = 57576
const CAST = 57577
const SUBSTR = 57578
const SUBSTRING = 57579
const GROUP_CONCAT = 57580
const SEPARATOR = 57581
const TIMESTAMPADD = 57582
const TIMESTAMPDIFF = 57583
const MATCH = 57584
const AGAINST = 57585
const BOOLEAN = 57586
const LANGUAGE = 57587
const WITH = 57588
const QUERY = 57589
const EXPANSION = 57590
const UNUSED = 57591
const AFTER = 57592
const ARRAY = 57593
const CUME_DIST = 57594
const DESCRIPTION = 57595
const DENSE_RANK = 57596
const EMPTY = 57597
const EXCEPT = 57598
const FIRST = 57599
const FIRST_VALUE = 57600
const GROUPING = 57601
const GROUPS = 57602
const JSON_TABLE = 57603
const LAG = 57604
const LAST_VALUE = 57605
const LATERAL = 57606
const LEAD = 57607
const MEMBER = 57608
const NTH_VALUE = 57609
const NTILE = 57610
const OF = 57611
const OVER = 57612
const PERCENT_RANK = 57613
const RANK = 57614
const RECURSIVE = 57615
const ROW_NUMBER = 57616
const SYSTEM = 57617
const WINDOW = 57618
const ACTIVE = 57619
const ADMIN = 57620
const BUCKETS = 57621
const CLONE = 57622
const COMPONENT = 57623
const DEFINITION = 57624
const ENFORCED = 57625
const EXCLUDE = 57626
const FOLLOWING = 57627
const GEOMCOLLECTION = 57628
const GET_MASTER_PUBLIC_KEY = 57629
const HISTOGRAM = 57630
const HISTORY = 57631
const INACTIVE = 57632
const INVISIBLE = 57633
const LOCKED = 57634
const MASTER_COMPRESSION_ALGORITHMS = 57635
const MASTER_PUBLIC_KEY_PATH = 57636
const MASTER_TLS_CIPHERSUITES = 57637
const MASTER_ZSTD_COMPRESSION_LEVEL = 57638
const NESTED = 57639
const NETWORK_NAMESPACE = 57640
const NOWAIT = 57641
const NULLS = 57642
const OJ = 57643
const OLD = 57644
const OPTIONAL = 57645
const ORDINALITY = 57646
const ORGANIZATION = 57647
const OTHERS = 57648
const PATH = 57649
const PERSIST = 57650
const PERSIST_ONLY = 57651
const PRECEDING = 57652
const PRIVILEGE_CHECKS_USER = 57653
const PROCESS = 57654
const RANDOM = 57655
const REFERENCE = 57656
const REQUIRE_ROW_FORMAT = 57657
const RESOURCE = 57658
const RESPECT = 57659
const RESTART = 57660
const RETAIN = 57661
const REUSE = 57662
const ROLE = 57663
const SECONDARY = 57664
const SECONDARY_ENGINE = 57665
const SECONDARY_LOAD = 57666
const SECONDARY_UNLOAD = 57667
const SKIP = 57668
const SRID = 57669
const THREAD_PRIORITY = 57670
const TIES = 57671
const UNBOUNDED = 57672
const VCPU = 57673
const VISIBLE = 57674

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"UNLOCK",
	"KEYS",
	"DISTINCTROW",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"UNDERSCORE_UTF8MB4",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"FLUSH",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"SPATIAL",
	"FULLTEXT",
	"KEY_BLOCK_SIZE",
	"CHECK",
	"ACTION",
	"CASCADE",
	"CONSTRAINT",
	"FOREIGN",
	"NO",
	"REFERENCES",
	"RESTRICT",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"WARNINGS",
	"SEQUENCE",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"COLLATION",
	"DATABASES",
	"TABLES",
	"VITESS_METADATA",
	"VSCHEMA",
	"FULL",
	"PROCESSLIST",
	"COLUMNS",
	"FIELDS",
	"ENGINES",
	"PLUGINS",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"TIMESTAMPADD",
	"TIMESTAMPDIFF",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"AFTER",
	"ARRAY",
	"CUME_DIST",
	"DESCRIPTION",
	"DENSE_RANK",
	"EMPTY",
	"EXCEPT",
	"FIRST",
	"FIRST_VALUE",
	"GROUPING",
	"GROUPS",
	"JSON_TABLE",
	"LAG",
	"LAST_VALUE",
	"LATERAL",
	"LEAD",
	"MEMBER",
	"NTH_VALUE",
	"NTILE",
	"OF",
	"OVER",
	"PERCENT_RANK",
	"RANK",
	"RECURSIVE",
	"ROW_NUMBER",
	"SYSTEM",
	"WINDOW",
	"ACTIVE",
	"ADMIN",
	"BUCKETS",
	"CLONE",
	"COMPONENT",
	"DEFINITION",
	"ENFORCED",
	"EXCLUDE",
	"FOLLOWING",
	"GEOMCOLLECTION",
	"GET_MASTER_PUBLIC_KEY",
	"HISTOGRAM",
	"HISTORY",
	"INACTIVE",
	"INVISIBLE",
	"LOCKED",
	"MASTER_COMPRESSION_ALGORITHMS",
	"MASTER_PUBLIC_KEY_PATH",
	"MASTER_TLS_CIPHERSUITES",
	"MASTER_ZSTD_COMPRESSION_LEVEL",
	"NESTED",
	"NETWORK_NAMESPACE",
	"NOWAIT",
	"NULLS",
	"OJ",
	"OLD",
	"OPTIONAL",
	"ORDINALITY",
	"ORGANIZATION",
	"OTHERS",
	"PATH",
	"PERSIST",
	"PERSIST_ONLY",
	"PRECEDING",
	"PRIVILEGE_CHECKS_USER",
	"PROCESS",
	"RANDOM",
	"REFERENCE",
	"REQUIRE_ROW_FORMAT",
	"RESOURCE",
	"RESPECT",
	"RESTART",
	"RETAIN",
	"REUSE",
	"ROLE",
	"SECONDARY",
	"SECONDARY_ENGINE",
	"SECONDARY_LOAD",
	"SECONDARY_UNLOAD",
	"SKIP",
	"SRID",
	"THREAD_PRIORITY",
	"TIES",
	"UNBOUNDED",
	"VCPU",
	"VISIBLE",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 29,
	-2, 4,
	-1, 38,
	161, 309,
	162, 309,
	-2, 297,
	-1, 324,
	113, 641,
	-2, 637,
	-1, 325,
	113, 642,
	-2, 638,
	-1, 393,
	83, 892,
	-2, 63,
	-1, 394,
	83, 812,
	-2, 64,
	-1, 399,
	83, 782,
	-2, 613,
	-1, 401,
	83, 842,
	-2, 615,
	-1, 724,
	1, 362,
	5, 362,
	12, 362,
	13, 362,
	14, 362,
	15, 362,
	17, 362,
	19, 362,
	30, 362,
	31, 362,
	43, 362,
	44, 362,
	45, 362,
	46, 362,
	47, 362,
	49, 362,
	50, 362,
	53, 362,
	54, 362,
	56, 362,
	57, 362,
	350, 362,
	-2, 380,
	-1, 727,
	54, 44,
	56, 44,
	-2, 48,
	-1, 898,
	113, 644,
	-2, 640,
	-1, 1124,
	5, 30,
	-2, 447,
	-1, 1154,
	5, 29,
	-2, 587,
	-1, 1386,
	5, 30,
	-2, 588,
	-1, 1442,
	5, 29,
	-2, 590,
	-1, 1512,
	5, 30,
	-2, 591,
}

const yyPrivate = 57344

const yyLast = 17008

var yyAct = [...]int{

	325, 1348, 1531, 541, 1235, 1538, 329, 1402, 1157, 680,
	582, 1012, 1175, 1422, 1288, 342, 1034, 355, 985, 1289,
	1339, 679, 3, 303, 1057, 1158, 1285, 58, 983, 1087,
	1181, 1048, 82, 1028, 1011, 1064, 294, 268, 1020, 827,
	268, 923, 1300, 398, 1260, 1008, 934, 1115, 847, 861,
	553, 1212, 527, 740, 987, 930, 972, 721, 952, 900,
	720, 611, 820, 538, 617, 539, 387, 739, 268, 82,
	965, 1044, 623, 268, 302, 268, 392, 312, 384, 395,
	632, 251, 295, 296, 297, 298, 327, 389, 301, 729,
	57, 1059, 62, 1533, 1521, 1529, 694, 569, 1058, 1510,
	1527, 1349, 549, 1520, 695, 1509, 1277, 1378, 532, 1315,
	584, 316, 1316, 1317, 605, 278, 1003, 1004, 64, 65,
	66, 67, 68, 1479, 645, 644, 654, 655, 647, 648,
	649, 650, 651, 652, 653, 646, 255, 1002, 656, 253,
	288, 257, 318, 300, 367, 331, 373, 374, 371, 372,
	370, 369, 368, 299, 263, 259, 260, 261, 1203, 1190,
	375, 376, 1189, 600, 741, 1191, 742, 601, 598, 599,
	1027, 1237, 1405, 604, 1429, 1035, 586, 1369, 588, 1367,
	836, 293, 593, 594, 603, 1239, 835, 833, 1344, 1228,
	1072, 271, 544, 558, 1234, 966, 1492, 1021, 274, 570,
	1544, 534, 257, 1340, 1240, 840, 282, 277, 1310, 585,
	587, 24, 25, 53, 27, 28, 1342, 803, 1542, 1309,
	837, 834, 1308, 530, 1238, 1074, 559, 270, 258, 1081,
	44, 551, 1080, 1486, 256, 29, 49, 50, 1456, 280,
	1389, 558, 1246, 1176, 1178, 287, 810, 1186, 250, 809,
	551, 249, 668, 669, 268, 254, 39, 1143, 1109, 268,
	55, 551, 869, 872, 773, 268, 735, 636, 576, 1009,
	656, 268, 272, 262, 82, 998, 82, 528, 82, 82,
	821, 82, 1328, 82, 1341, 1233, 862, 866, 631, 82,
	557, 558, 1133, 1480, 583, 646, 555, 542, 656, 284,
	275, 1089, 285, 286, 291, 554, 1035, 1279, 276, 279,
	526, 273, 290, 289, 552, 1468, 1508, 953, 556, 82,
	1177, 31, 33, 35, 34, 37, 1540, 51, 550, 1541,
	620, 1539, 1417, 1329, 619, 566, 607, 608, 557, 1298,
	1457, 1455, 743, 761, 555, 542, 629, 550, 551, 38,
	45, 46, 805, 554, 47, 48, 36, 354, 550, 572,
	573, 574, 631, 548, 545, 542, 546, 547, 863, 540,
	40, 41, 1201, 42, 43, 630, 629, 1130, 528, 1495,
	1088, 774, 268, 268, 268, 551, 544, 1024, 557, 80,
	1232, 82, 631, 1025, 626, 668, 669, 82, 563, 1463,
	564, 395, 621, 565, 787, 790, 791, 792, 793, 794,
	795, 719, 796, 797, 798, 799, 800, 775, 776, 777,
	778, 759, 760, 788, 933, 762, 397, 763, 764, 765,
	766, 767, 768, 769, 770, 771, 772, 779, 780, 781,
	782, 783, 784, 785, 786, 550, 1261, 614, 618, 71,
	548, 545, 533, 546, 547, 54, 953, 1411, 1140, 1019,
	1021, 1410, 728, 1515, 637, 697, 699, 701, 703, 705,
	707, 708, 666, 698, 700, 733, 704, 706, 737, 709,
	668, 669, 550, 1545, 1263, 72, 1216, 548, 545, 542,
	546, 547, 924, 540, 925, 789, 1106, 1107, 1108, 681,
	647, 648, 649, 650, 651, 652, 653, 646, 692, 252,
	656, 649, 650, 651, 652, 653, 646, 1215, 1265, 656,
	1269, 1204, 1264, 1546, 1262, 907, 610, 268, 724, 1267,
	535, 536, 82, 1192, 55, 1193, 22, 268, 1266, 905,
	906, 904, 630, 629, 903, 82, 1128, 1436, 1127, 875,
	876, 1268, 1270, 82, 82, 1418, 1408, 82, 1243, 631,
	268, 82, 82, 82, 1213, 630, 629, 268, 1092, 55,
	268, 1415, 528, 268, 1351, 381, 382, 268, 528, 82,
	82, 1197, 631, 610, 82, 82, 82, 268, 82, 82,
	821, 811, 1453, 1528, 82, 82, 926, 307, 630, 629,
	846, 957, 654, 655, 647, 648, 649, 650, 651, 652,
	653, 646, 822, 845, 656, 631, 871, 1517, 610, 808,
	849, 806, 804, 82, 801, 630, 629, 578, 268, 571,
	1129, 397, 1281, 397, 82, 397, 397, 562, 397, 561,
	397, 1462, 631, 877, 1453, 1504, 397, 897, 841, 817,
	818, 819, 1453, 610, 870, 1453, 1487, 901, 1461, 645,
	644, 654, 655, 647, 648, 649, 650, 651, 652, 653,
	646, 630, 629, 656, 1453, 1452, 634, 1325, 82, 1022,
	898, 630, 629, 1071, 610, 896, 1388, 610, 631, 1297,
	890, 892, 893, 936, 943, 946, 891, 1384, 631, 879,
	954, 1335, 1334, 24, 938, 1331, 1332, 1331, 1330, 1122,
	610, 82, 82, 1116, 894, 1226, 1225, 1182, 268, 345,
	344, 347, 348, 349, 350, 1467, 268, 268, 346, 351,
	268, 268, 1221, 610, 268, 268, 268, 82, 969, 610,
	936, 610, 750, 749, 731, 864, 1286, 395, 397, 1297,
	82, 59, 55, 1182, 745, 927, 928, 731, 993, 969,
	1013, 969, 995, 950, 974, 977, 978, 979, 975, 962,
	976, 980, 887, 888, 1301, 1302, 1249, 1522, 992, 849,
	730, 1036, 1037, 1038, 1333, 902, 968, 732, 1194, 734,
	24, 1001, 1122, 1030, 1031, 1032, 1033, 1297, 991, 1146,
	732, 996, 730, 1016, 268, 82, 1000, 82, 1381, 1041,
	1042, 1043, 969, 999, 1152, 82, 1017, 1145, 1122, 1153,
	730, 1122, 1071, 736, 873, 681, 82, 839, 941, 942,
	537, 55, 1050, 1424, 268, 268, 268, 268, 268, 55,
	268, 268, 1395, 1029, 268, 82, 645, 644, 654, 655,
	647, 648, 649, 650, 651, 652, 653, 646, 24, 309,
	656, 268, 1049, 268, 268, 1061, 1321, 1045, 268, 1046,
	1047, 724, 1301, 1302, 552, 724, 1040, 1039, 814, 724,
	1067, 1068, 1069, 897, 1236, 1425, 1007, 1441, 1052, 397,
	644, 654, 655, 647, 648, 649, 650, 651, 652, 653,
	646, 1535, 815, 656, 609, 885, 1307, 55, 55, 1532,
	823, 824, 1323, 1304, 828, 1286, 898, 1217, 397, 397,
	397, 1097, 901, 974, 977, 978, 979, 975, 867, 976,
	980, 843, 1306, 1166, 1165, 1169, 397, 397, 1098, 1099,
	1170, 397, 397, 397, 1167, 397, 397, 313, 314, 1168,
	1525, 397, 397, 1519, 1245, 1171, 1062, 978, 979, 1094,
	1104, 1103, 1066, 624, 1111, 624, 1208, 748, 579, 612,
	268, 268, 268, 268, 268, 1159, 625, 1200, 625, 622,
	881, 613, 268, 1497, 1496, 268, 1439, 1154, 1198, 268,
	826, 634, 825, 268, 397, 816, 1382, 1420, 1055, 842,
	982, 1102, 615, 310, 311, 304, 938, 1473, 305, 1101,
	1139, 59, 82, 1095, 1096, 1472, 618, 1427, 1182, 602,
	1134, 1183, 1013, 1195, 1184, 1131, 1185, 860, 1161, 1162,
	1160, 1164, 627, 1163, 1537, 929, 1483, 1172, 1406, 266,
	1537, 1536, 292, 1180, 868, 61, 63, 1205, 1206, 56,
	902, 955, 1, 82, 82, 1187, 1530, 1350, 1421, 1073,
	1500, 1338, 1063, 543, 1010, 70, 1220, 319, 959, 960,
	388, 248, 82, 525, 69, 266, 1416, 266, 1018, 1123,
	1207, 1060, 1209, 1210, 1211, 82, 1223, 1454, 1404, 1023,
	1202, 1026, 1214, 1322, 397, 1199, 1141, 1494, 756, 1227,
	754, 268, 755, 753, 610, 758, 757, 397, 939, 940,
	82, 752, 945, 948, 949, 724, 724, 724, 724, 724,
	1251, 281, 390, 1231, 981, 744, 1051, 628, 73, 1230,
	724, 865, 596, 597, 283, 664, 1242, 961, 724, 963,
	964, 645, 644, 654, 655, 647, 648, 649, 650, 651,
	652, 653, 646, 1100, 1282, 656, 82, 82, 1188, 1159,
	1253, 1287, 397, 396, 397, 1278, 1252, 1293, 874, 1259,
	1271, 1290, 1065, 616, 1272, 1471, 1426, 1292, 1138, 691,
	82, 951, 330, 1070, 889, 343, 340, 898, 1296, 341,
	880, 1151, 1097, 638, 328, 82, 1295, 82, 320, 723,
	716, 973, 397, 971, 970, 1013, 1305, 1013, 1319, 1312,
	385, 1303, 1299, 722, 1314, 1248, 1377, 1478, 268, 1311,
	884, 26, 878, 60, 315, 19, 18, 82, 17, 1318,
	397, 268, 1244, 20, 16, 82, 1320, 15, 82, 82,
	82, 268, 14, 567, 32, 30, 21, 82, 13, 12,
	268, 1326, 1327, 11, 10, 9, 266, 1251, 8, 7,
	6, 266, 1343, 5, 4, 306, 23, 266, 1346, 2,
	0, 0, 1356, 266, 1337, 0, 0, 0, 1358, 1357,
	0, 935, 937, 1280, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1362, 1363, 1365, 1364, 0,
	0, 1366, 0, 1368, 1159, 0, 0, 0, 0, 1105,
	0, 0, 0, 0, 1383, 0, 0, 0, 0, 82,
	0, 0, 82, 1392, 1391, 1313, 955, 0, 0, 1013,
	1195, 0, 0, 0, 0, 0, 1401, 82, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1407, 0, 1409,
	82, 0, 0, 0, 0, 0, 1120, 1121, 0, 1414,
	1423, 0, 1413, 0, 0, 0, 0, 0, 0, 397,
	0, 0, 0, 0, 0, 1137, 0, 0, 0, 0,
	1428, 0, 0, 0, 266, 266, 266, 0, 0, 82,
	82, 0, 0, 0, 0, 724, 82, 0, 82, 82,
	82, 268, 1290, 1447, 1440, 1448, 1449, 1450, 0, 1442,
	1218, 397, 0, 0, 0, 1446, 0, 955, 0, 1451,
	0, 0, 1458, 0, 1379, 82, 268, 0, 0, 1229,
	0, 0, 1469, 0, 681, 0, 0, 0, 0, 0,
	0, 1393, 397, 0, 1394, 0, 0, 1396, 0, 0,
	0, 0, 0, 1459, 82, 1460, 1484, 0, 0, 1290,
	0, 0, 0, 0, 1491, 1485, 0, 397, 82, 82,
	1501, 0, 0, 0, 0, 0, 0, 0, 1423, 1013,
	1503, 1502, 0, 1506, 0, 0, 0, 82, 0, 0,
	1159, 0, 1511, 268, 0, 0, 0, 0, 0, 0,
	0, 397, 0, 0, 0, 0, 0, 0, 0, 1518,
	955, 580, 0, 1294, 828, 0, 0, 0, 0, 0,
	1524, 1523, 0, 82, 0, 0, 0, 0, 1118, 266,
	1526, 0, 1119, 1534, 0, 0, 0, 828, 0, 266,
	1124, 1125, 1126, 1543, 726, 0, 0, 1132, 0, 0,
	1135, 1136, 397, 0, 397, 0, 1142, 0, 0, 0,
	1144, 0, 266, 1147, 1148, 1149, 1150, 0, 0, 266,
	0, 0, 266, 0, 0, 266, 0, 0, 0, 848,
	0, 265, 0, 0, 1065, 1174, 0, 0, 0, 266,
	0, 0, 1347, 0, 0, 1352, 1353, 1354, 0, 0,
	0, 0, 0, 0, 397, 0, 0, 0, 0, 0,
	0, 0, 386, 0, 0, 1505, 681, 529, 0, 531,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	266, 0, 0, 0, 0, 0, 0, 0, 0, 848,
	0, 0, 356, 52, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 955, 0, 0, 0, 0,
	0, 0, 1222, 0, 1224, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 397, 0, 0, 1403,
	0, 319, 0, 0, 0, 0, 319, 319, 0, 0,
	319, 319, 319, 0, 397, 52, 956, 0, 0, 0,
	0, 0, 0, 308, 0, 0, 0, 397, 0, 0,
	0, 0, 0, 0, 0, 319, 319, 319, 319, 0,
	266, 0, 1257, 1258, 0, 0, 0, 0, 266, 989,
	0, 0, 266, 266, 0, 0, 266, 997, 848, 0,
	0, 0, 0, 0, 0, 0, 1444, 1445, 0, 0,
	640, 0, 643, 1403, 0, 1403, 1403, 1403, 657, 658,
	659, 660, 661, 662, 663, 0, 641, 642, 639, 645,
	644, 654, 655, 647, 648, 649, 650, 651, 652, 653,
	646, 0, 1403, 656, 0, 0, 0, 589, 0, 590,
	591, 0, 592, 0, 595, 0, 0, 0, 560, 0,
	606, 0, 0, 568, 0, 0, 266, 0, 0, 575,
	0, 1493, 0, 0, 322, 577, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 397, 397, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 266, 266, 266, 266,
	266, 955, 266, 266, 1513, 0, 266, 0, 0, 0,
	0, 0, 0, 0, 1359, 0, 0, 0, 0, 0,
	1380, 1375, 1361, 266, 0, 1090, 1091, 0, 0, 0,
	266, 0, 0, 1370, 1371, 848, 0, 0, 0, 1374,
	1403, 0, 0, 0, 0, 0, 0, 319, 0, 0,
	0, 0, 0, 1385, 1386, 1387, 0, 1390, 645, 644,
	654, 655, 647, 648, 649, 650, 651, 652, 653, 646,
	0, 0, 656, 1400, 0, 0, 581, 0, 581, 0,
	581, 581, 0, 581, 0, 581, 718, 0, 727, 0,
	0, 581, 0, 0, 319, 319, 645, 644, 654, 655,
	647, 648, 649, 650, 651, 652, 653, 646, 0, 0,
	656, 52, 0, 319, 645, 644, 654, 655, 647, 648,
	649, 650, 651, 652, 653, 646, 665, 0, 656, 667,
	0, 956, 266, 266, 266, 266, 266, 0, 0, 1435,
	0, 0, 0, 0, 1173, 0, 0, 266, 0, 0,
	0, 989, 0, 0, 0, 266, 0, 678, 0, 682,
	683, 684, 685, 686, 687, 688, 689, 690, 0, 693,
	696, 696, 696, 702, 696, 696, 702, 696, 710, 711,
	712, 713, 714, 715, 0, 725, 0, 0, 0, 0,
	0, 0, 1474, 1475, 1476, 1477, 0, 0, 0, 1481,
	1482, 0, 0, 802, 0, 0, 0, 0, 0, 0,
	1488, 1489, 1490, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 956, 0, 0, 0, 1498, 1499, 0, 0,
	0, 751, 830, 831, 832, 0, 0, 0, 0, 0,
	1507, 807, 1373, 0, 0, 0, 0, 1512, 0, 0,
	850, 851, 0, 0, 0, 852, 853, 854, 0, 856,
	857, 0, 1516, 266, 829, 858, 859, 0, 0, 1372,
	0, 838, 0, 319, 386, 0, 0, 844, 0, 0,
	0, 0, 0, 0, 0, 319, 0, 0, 0, 0,
	0, 855, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 848, 670, 671, 672,
	673, 674, 675, 676, 677, 956, 0, 645, 644, 654,
	655, 647, 648, 649, 650, 651, 652, 653, 646, 0,
	0, 656, 886, 0, 581, 0, 0, 0, 0, 0,
	0, 812, 0, 813, 645, 644, 654, 655, 647, 648,
	649, 650, 651, 652, 653, 646, 0, 0, 656, 0,
	0, 0, 0, 581, 581, 581, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	266, 581, 581, 0, 0, 0, 581, 581, 581, 0,
	581, 581, 0, 266, 0, 0, 581, 581, 0, 0,
	0, 0, 0, 266, 0, 0, 0, 0, 0, 0,
	0, 0, 266, 0, 0, 0, 1254, 0, 0, 0,
	0, 0, 967, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 994, 645, 644, 654, 655,
	647, 648, 649, 650, 651, 652, 653, 646, 0, 0,
	656, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	956, 0, 0, 0, 0, 0, 1117, 0, 0, 0,
	52, 0, 0, 0, 0, 0, 1054, 0, 1056, 0,
	0, 0, 0, 0, 0, 682, 645, 644, 654, 655,
	647, 648, 649, 650, 651, 652, 653, 646, 0, 0,
	656, 0, 0, 0, 0, 0, 0, 0, 1053, 0,
	0, 0, 0, 0, 0, 0, 1085, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 984, 0,
	0, 0, 725, 0, 0, 0, 725, 0, 1075, 1076,
	1077, 1078, 1079, 0, 1082, 1083, 0, 0, 1084, 0,
	645, 644, 654, 655, 647, 648, 649, 650, 651, 652,
	653, 646, 0, 989, 656, 1086, 0, 0, 0, 0,
	0, 0, 1093, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 266, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 581, 0, 581,
	0, 0, 0, 899, 0, 0, 908, 909, 910, 911,
	912, 913, 914, 915, 916, 917, 918, 919, 920, 921,
	922, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 956, 581, 0, 0,
	0, 0, 0, 0, 0, 266, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 958, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1110, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1219, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1241, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1155, 1156,
	0, 0, 725, 725, 725, 725, 725, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 984, 0, 1179,
	0, 0, 0, 0, 0, 725, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1247, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 581, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1112, 1113, 1114, 0, 0, 0, 0, 581, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1336, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1345, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1355, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1291, 0, 52, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1412, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 725, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1376, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1255, 1256, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1273, 1274, 0, 1275, 1276,
	0, 1397, 1398, 1399, 0, 0, 0, 0, 0, 0,
	1283, 1284, 0, 0, 0, 0, 0, 0, 0, 0,
	1470, 0, 0, 0, 0, 0, 0, 0, 0, 581,
	0, 0, 0, 0, 0, 0, 0, 1419, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1324, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1291, 0, 0,
	1443, 0, 0, 0, 0, 0, 0, 1514, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1466, 0, 0, 0, 0, 0, 1360,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1291, 0, 52, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1430, 1431, 1432,
	1433, 1434, 0, 0, 0, 1437, 1438, 512, 500, 0,
	455, 515, 426, 445, 523, 446, 449, 486, 411, 468,
	165, 442, 0, 430, 406, 437, 407, 428, 457, 112,
	461, 425, 502, 471, 514, 137, 431, 521, 139, 477,
	0, 209, 153, 0, 1464, 459, 504, 466, 497, 454,
	487, 416, 476, 516, 443, 484, 517, 0, 0, 0,
	81, 0, 1014, 1015, 0, 0, 0, 0, 0, 102,
	0, 481, 511, 439, 483, 485, 405, 478, 0, 409,
	412, 522, 507, 434, 435, 1196, 0, 0, 0, 0,
	0, 0, 458, 467, 494, 452, 0, 0, 0, 0,
	0, 0, 0, 0, 432, 0, 475, 0, 0, 0,
	413, 410, 0, 0, 456, 0, 0, 0, 415, 0,
	433, 495, 0, 402, 120, 499, 506, 453, 269, 510,
	451, 450, 513, 491, 0, 213, 122, 136, 98, 84,
	94, 0, 444, 162, 189, 193, 503, 429, 438, 106,
	436, 191, 172, 229, 474, 489, 190, 140, 219, 183,
	228, 238, 239, 216, 236, 243, 206, 87, 215, 227,
	103, 201, 89, 225, 212, 151, 131, 132, 88, 0,
	187, 111, 118, 108, 164, 222, 223, 107, 246, 95,
	235, 91, 96, 234, 158, 218, 226, 152, 145, 90,
	224, 150, 144, 135, 115, 124, 181, 142, 182, 125,
	155, 154, 156, 0, 408, 0, 210, 232, 247, 100,
	424, 217, 241, 242, 0, 0, 101, 119, 114, 180,
	157, 97, 127, 207, 134, 141, 186, 245, 171, 192,
	104, 231, 208, 420, 423, 418, 419, 469, 470, 518,
	519, 520, 496, 414, 0, 421, 422, 0, 501, 508,
	509, 473, 83, 92, 138, 244, 184, 117, 233, 403,
	404, 417, 110, 427, 0, 0, 440, 441, 447, 448,
	460, 462, 463, 464, 465, 472, 479, 480, 482, 488,
	490, 492, 493, 498, 505, 524, 85, 86, 93, 99,
	105, 109, 113, 116, 121, 123, 126, 128, 129, 130,
	133, 143, 146, 147, 148, 149, 159, 160, 161, 163,
	166, 167, 168, 169, 170, 173, 174, 175, 176, 177,
	178, 179, 185, 188, 194, 195, 196, 197, 198, 199,
	200, 202, 203, 204, 205, 211, 214, 220, 221, 230,
	237, 240, 512, 500, 0, 455, 515, 426, 445, 523,
	446, 449, 486, 411, 468, 165, 442, 0, 430, 406,
	437, 407, 428, 457, 112, 461, 425, 502, 471, 514,
	137, 431, 521, 139, 477, 0, 209, 153, 0, 0,
	459, 504, 466, 497, 454, 487, 416, 476, 516, 443,
	484, 517, 0, 0, 0, 81, 0, 1014, 1015, 0,
	0, 0, 0, 0, 102, 0, 481, 511, 439, 483,
	485, 405, 478, 0, 409, 412, 522, 507, 434, 435,
	0, 0, 0, 0, 0, 0, 0, 458, 467, 494,
	452, 0, 0, 0, 0, 0, 0, 0, 0, 432,
	0, 475, 0, 0, 0, 413, 410, 0, 0, 456,
	0, 0, 0, 415, 0, 433, 495, 0, 402, 120,
	499, 506, 453, 269, 510, 451, 450, 513, 491, 0,
	213, 122, 136, 98, 84, 94, 0, 444, 162, 189,
	193, 503, 429, 438, 106, 436, 191, 172, 229, 474,
	489, 190, 140, 219, 183, 228, 238, 239, 216, 236,
	243, 206, 87, 215, 227, 103, 201, 89, 225, 212,
	151, 131, 132, 88, 0, 187, 111, 118, 108, 164,
	222, 223, 107, 246, 95, 235, 91, 96, 234, 158,
	218, 226, 152, 145, 90, 224, 150, 144, 135, 115,
	124, 181, 142, 182, 125, 155, 154, 156, 0, 408,
	0, 210, 232, 247, 100, 424, 217, 241, 242, 0,
	0, 101, 119, 114, 180, 157, 97, 127, 207, 134,
	141, 186, 245, 171, 192, 104, 231, 208, 420, 423,
	418, 419, 469, 470, 518, 519, 520, 496, 414, 0,
	421, 422, 0, 501, 508, 509, 473, 83, 92, 138,
	244, 184, 117, 233, 403, 404, 417, 110, 427, 0,
	0, 440, 441, 447, 448, 460, 462, 463, 464, 465,
	472, 479, 480, 482, 488, 490, 492, 493, 498, 505,
	524, 85, 86, 93, 99, 105, 109, 113, 116, 121,
	123, 126, 128, 129, 130, 133, 143, 146, 147, 148,
	149, 159, 160, 161, 163, 166, 167, 168, 169, 170,
	173, 174, 175, 176, 177, 178, 179, 185, 188, 194,
	195, 196, 197, 198, 199, 200, 202, 203, 204, 205,
	211, 214, 220, 221, 230, 237, 240, 512, 500, 0,
	455, 515, 426, 445, 523, 446, 449, 486, 411, 468,
	165, 442, 0, 430, 406, 437, 407, 428, 457, 112,
	461, 425, 502, 471, 514, 137, 431, 521, 139, 477,
	0, 209, 153, 0, 0, 459, 504, 466, 497, 454,
	487, 416, 476, 516, 443, 484, 517, 55, 0, 0,
	81, 0, 0, 0, 0, 0, 0, 0, 0, 102,
	0, 481, 511, 439, 483, 485, 405, 478, 0, 409,
	412, 522, 507, 434, 435, 0, 0, 0, 0, 0,
	0, 0, 458, 467, 494, 452, 0, 0, 0, 0,
	0, 0, 0, 0, 432, 0, 475, 0, 0, 0,
	413, 410, 0, 0, 456, 0, 0, 0, 415, 0,
	433, 495, 0, 402, 120, 499, 506, 453, 269, 510,
	451, 450, 513, 491, 0, 213, 122, 136, 98, 84,
	94, 0, 444, 162, 189, 193, 503, 429, 438, 106,
	436, 191, 172, 229, 474, 489, 190, 140, 219, 183,
	228, 238, 239, 216, 236, 243, 206, 87, 215, 227,
	103, 201, 89, 225, 212, 151, 131, 132, 88, 0,
	187, 111, 118, 108, 164, 222, 223, 107, 246, 95,
	235, 91, 96, 234, 158, 218, 226, 152, 145, 90,
	224, 150, 144, 135, 115, 124, 181, 142, 182, 125,
	155, 154, 156, 0, 408, 0, 210, 232, 247, 100,
	424, 217, 241, 242, 0, 0, 101, 119, 114, 180,
	157, 97, 127, 207, 134, 141, 186, 245, 171, 192,
	104, 231, 208, 420, 423, 418, 419, 469, 470, 518,
	519, 520, 496, 414, 0, 421, 422, 0, 501, 508,
	509, 473, 83, 92, 138, 244, 184, 117, 233, 403,
	404, 417, 110, 427, 0, 0, 440, 441, 447, 448,
	460, 462, 463, 464, 465, 472, 479, 480, 482, 488,
	490, 492, 493, 498, 505, 524, 85, 86, 93, 99,
	105, 109, 113, 116, 121, 123, 126, 128, 129, 130,
	133, 143, 146, 147, 148, 149, 159, 160, 161, 163,
	166, 167, 168, 169, 170, 173, 174, 175, 176, 177,
	178, 179, 185, 188, 194, 195, 196, 197, 198, 199,
	200, 202, 203, 204, 205, 211, 214, 220, 221, 230,
	237, 240, 512, 500, 0, 455, 515, 426, 445, 523,
	446, 449, 486, 411, 468, 165, 442, 0, 430, 406,
	437, 407, 428, 457, 112, 461, 425, 502, 471, 514,
	137, 431, 521, 139, 477, 0, 209, 153, 0, 0,
	459, 504, 466, 497, 454, 487, 416, 476, 516, 443,
	484, 517, 0, 0, 0, 81, 0, 0, 0, 0,
	0, 0, 0, 0, 102, 0, 481, 511, 439, 483,
	485, 405, 478, 0, 409, 412, 522, 507, 434, 435,
	0, 0, 0, 0, 0, 0, 0, 458, 467, 494,
	452, 0, 0, 0, 0, 0, 0, 1250, 0, 432,
	0, 475, 0, 0, 0, 413, 410, 0, 0, 456,
	0, 0, 0, 415, 0, 433, 495, 0, 402, 120,
	499, 506, 453, 269, 510, 451, 450, 513, 491, 0,
	213, 122, 136, 98, 84, 94, 0, 444, 162, 189,
	193, 503, 429, 438, 106, 436, 191, 172, 229, 474,
	489, 190, 140, 219, 183, 228, 238, 239, 216, 236,
	243, 206, 87, 215, 227, 103, 201, 89, 225, 212,
	151, 131, 132, 88, 0, 187, 111, 118, 108, 164,
	222, 223, 107, 246, 95, 235, 91, 96, 234, 158,
	218, 226, 152, 145, 90, 224, 150, 144, 135, 115,
	124, 181, 142, 182, 125, 155, 154, 156, 0, 408,
	0, 210, 232, 247, 100, 424, 217, 241, 242, 0,
	0, 101, 119, 114, 180, 157, 97, 127, 207, 134,
	141, 186, 245, 171, 192, 104, 231, 208, 420, 423,
	418, 419, 469, 470, 518, 519, 520, 496, 414, 0,
	421, 422, 0, 501, 508, 509, 473, 83, 92, 138,
	244, 184, 117, 233, 403, 404, 417, 110, 427, 0,
	0, 440, 441, 447, 448, 460, 462, 463, 464, 465,
	472, 479, 480, 482, 488, 490, 492, 493, 498, 505,
	524, 85, 86, 93, 99, 105, 109, 113, 116, 121,
	123, 126, 128, 129, 130, 133, 143, 146, 147, 148,
	149, 159, 160, 161, 163, 166, 167, 168, 169, 170,
	173, 174, 175, 176, 177, 178, 179, 185, 188, 194,
	195, 196, 197, 198, 199, 200, 202, 203, 204, 205,
	211, 214, 220, 221, 230, 237, 240, 512, 500, 0,
	455, 515, 426, 445, 523, 446, 449, 486, 411, 468,
	165, 442, 0, 430, 406, 437, 407, 428, 457, 112,
	461, 425, 502, 471, 514, 137, 431, 521, 139, 477,
	0, 209, 153, 0, 0, 459, 504, 466, 497, 454,
	487, 416, 476, 516, 443, 484, 517, 0, 0, 0,
	267, 0, 0, 0, 0, 0, 0, 0, 0, 102,
	0, 481, 511, 439, 483, 485, 405, 478, 0, 409,
	412, 522, 507, 434, 435, 0, 0, 0, 0, 0,
	0, 0, 458, 467, 494, 452, 0, 0, 0, 0,
	0, 0, 998, 0, 432, 0, 475, 0, 0, 0,
	413, 410, 0, 0, 456, 0, 0, 0, 415, 0,
	433, 495, 0, 402, 120, 499, 506, 453, 269, 510,
	451, 450, 513, 491, 0, 213, 122, 136, 98, 84,
	94, 0, 444, 162, 189, 193, 503, 429, 438, 106,
	436, 191, 172, 229, 474, 489, 190, 140, 219, 183,
	228, 238, 239, 216, 236, 243, 206, 87, 215, 227,
	103, 201, 89, 225, 212, 151, 131, 132, 88, 0,
	187, 111, 118, 108, 164, 222, 223, 107, 246, 95,
	235, 91, 96, 234, 158, 218, 226, 152, 145, 90,
	224, 150, 144, 135, 115, 124, 181, 142, 182, 125,
	155, 154, 156, 0, 408, 0, 210, 232, 247, 100,
	424, 217, 241, 242, 0, 0, 101, 119, 114, 180,
	157, 97, 127, 207, 134, 141, 186, 245, 171, 192,
	104, 231, 208, 420, 423, 418, 419, 469, 470, 518,
	519, 520, 496, 414, 0, 421, 422, 0, 501, 508,
	509, 473, 83, 92, 138, 244, 184, 117, 233, 403,
	404, 417, 110, 427, 0, 0, 440, 441, 447, 448,
	460, 462, 463, 464, 465, 472, 479, 480, 482, 488,
	490, 492, 493, 498, 505, 524, 85, 86, 93, 99,
	105, 109, 113, 116, 121, 123, 126, 128, 129, 130,
	133, 143, 146, 147, 148, 149, 159, 160, 161, 163,
	166, 167, 168, 169, 170, 173, 174, 175, 176, 177,
	178, 179, 185, 188, 194, 195, 196, 197, 198, 199,
	200, 202, 203, 204, 205, 211, 214, 220, 221, 230,
	237, 240, 512, 500, 0, 455, 515, 426, 445, 523,
	446, 449, 486, 411, 468, 165, 442, 0, 430, 406,
	437, 407, 428, 457, 112, 461, 425, 502, 471, 514,
	137, 431, 521, 139, 477, 0, 209, 153, 0, 0,
	459, 504, 466, 497, 454, 487, 416, 476, 516, 443,
	484, 517, 0, 0, 0, 324, 0, 0, 0, 0,
	0, 0, 0, 0, 102, 0, 481, 511, 439, 483,
	485, 405, 478, 0, 409, 412, 522, 507, 434, 435,
	0, 0, 0, 0, 0, 0, 0, 458, 467, 494,
	452, 0, 0, 0, 0, 0, 0, 895, 0, 432,
	0, 475, 0, 0, 0, 413, 410, 0, 0, 456,
	0, 0, 0, 415, 0, 433, 495, 0, 402, 120,
	499, 506, 453, 269, 510, 451, 450, 513, 491, 0,
	213, 122, 136, 98, 84, 94, 0, 444, 162, 189,
	193, 503, 429, 438, 106, 436, 191, 172, 229, 474,
	489, 190, 140, 219, 183, 228, 238, 239, 216, 236,
	243, 206, 87, 215, 227, 103, 201, 89, 225, 212,
	151, 131, 132, 88, 0, 187, 111, 118, 108, 164,
	222, 223, 107, 246, 95, 235, 91, 96, 234, 158,
	218, 226, 152, 145, 90, 224, 150, 144, 135, 115,
	124, 181, 142, 182, 125, 155, 154, 156, 0, 408,
	0, 210, 232, 247, 100, 424, 217, 241, 242, 0,
	0, 101, 119, 114, 180, 157, 97, 127, 207, 134,
	141, 186, 245, 171, 192, 104, 231, 208, 420, 423,
	418, 419, 469, 470, 518, 519, 520, 496, 414, 0,
	421, 422, 0, 501, 508, 509, 473, 83, 92, 138,
	244, 184, 117, 233, 403, 404, 417, 110, 427, 0,
	0, 440, 441, 447, 448, 460, 462, 463, 464, 465,
	472, 479, 480, 482, 488, 490, 492, 493, 498, 505,
	524, 85, 86, 93, 99, 105, 109, 113, 116, 121,
	123, 126, 128, 129, 130, 133, 143, 146, 147, 148,
	149, 159, 160, 161, 163, 166, 167, 168, 169, 170,
	173, 174, 175, 176, 177, 178, 179, 185, 188, 194,
	195, 196, 197, 198, 199, 200, 202, 203, 204, 205,
	211, 214, 220, 221, 230, 237, 240, 512, 500, 0,
	455, 515, 426, 445, 523, 446, 449, 486, 411, 468,
	165, 442, 0, 430, 406, 437, 407, 428, 457, 112,
	461, 425, 502, 471, 514, 137, 431, 521, 139, 477,
	0, 209, 153, 0, 0, 459, 504, 466, 497, 454,
	487, 416, 476, 516, 443, 484, 517, 0, 0, 0,
	81, 0, 0, 0, 0, 0, 0, 0, 0, 102,
	0, 481, 511, 439, 483, 485, 405, 478, 0, 409,
	412, 522, 507, 434, 435, 0, 0, 0, 0, 0,
	0, 0, 458, 467, 494, 452, 0, 0, 0, 0,
	0, 0, 0, 0, 432, 0, 475, 0, 0, 0,
	413, 410, 0, 0, 456, 0, 0, 0, 415, 0,
	433, 495, 0, 402, 120, 499, 506, 453, 269, 510,
	451, 450, 513, 491, 0, 213, 122, 136, 98, 84,
	94, 0, 444, 162, 189, 193, 503, 429, 438, 106,
	436, 191, 172, 229, 474, 489, 190, 140, 219, 183,
	228, 238, 239, 216, 236, 243, 206, 87, 215, 227,
	103, 201, 89, 225, 212, 151, 131, 132, 88, 0,
	187, 111, 118, 108, 164, 222, 223, 107, 246, 95,
	235, 91, 96, 234, 158, 218, 226, 152, 145, 90,
	224, 150, 144, 135, 115, 124, 181, 142, 182, 125,
	155, 154, 156, 0, 408, 0, 210, 232, 247, 100,
	424, 217, 241, 242, 0, 0, 101, 119, 114, 180,
	157, 97, 127, 207, 134, 141, 186, 245, 171, 192,
	104, 231, 208, 420, 423, 418, 419, 469, 470, 518,
	519, 520, 496, 414, 0, 421, 422, 0, 501, 508,
	509, 473, 83, 92, 138, 244, 184, 117, 233, 403,
	404, 417, 110, 427, 0, 0, 440, 441, 447, 448,
	460, 462, 463, 464, 465, 472, 479, 480, 482, 488,
	490, 492, 493, 498, 505, 524, 85, 86, 93, 99,
	105, 109, 113, 116, 121, 123, 126, 128, 129, 130,
	133, 143, 146, 147, 148, 149, 159, 160, 161, 163,
	166, 167, 168, 169, 170, 173, 174, 175, 176, 177,
	178, 179, 185, 188, 194, 195, 196, 197, 198, 199,
	200, 202, 203, 204, 205, 211, 214, 220, 221, 230,
	237, 240, 512, 500, 0, 455, 515, 426, 445, 523,
	446, 449, 486, 411, 468, 165, 442, 0, 430, 406,
	437, 407, 428, 457, 112, 461, 425, 502, 471, 514,
	137, 431, 521, 139, 477, 0, 209, 153, 0, 0,
	459, 504, 466, 497, 454, 487, 416, 476, 516, 443,
	484, 517, 0, 0, 0, 324, 0, 0, 0, 0,
	0, 0, 0, 0, 102, 0, 481, 511, 439, 483,
	485, 405, 478, 0, 409, 412, 522, 507, 434, 435,
	0, 0, 0, 0, 0, 0, 0, 458, 467, 494,
	452, 0, 0, 0, 0, 0, 0, 0, 0, 432,
	0, 475, 0, 0, 0, 413, 410, 0, 0, 456,
	0, 0, 0, 415, 0, 433, 495, 0, 402, 120,
	499, 506, 453, 269, 510, 451, 450, 513, 491, 0,
	213, 122, 136, 98, 84, 94, 0, 444, 162, 189,
	193, 503, 429, 438, 106, 436, 191, 172, 229, 474,
	489, 190, 140, 219, 183, 228, 238, 239, 216, 236,
	243, 206, 87, 215, 227, 103, 201, 89, 225, 212,
	151, 131, 132, 88, 0, 187, 111, 118, 108, 164,
	222, 223, 107, 246, 95, 235, 91, 96, 234, 158,
	218, 226, 152, 145, 90, 224, 150, 144, 135, 115,
	124, 181, 142, 182, 125, 155, 154, 156, 0, 408,
	0, 210, 232, 247, 100, 424, 217, 241, 242, 0,
	0, 101, 119, 114, 180, 157, 97, 127, 207, 134,
	141, 186, 245, 171, 192, 104, 231, 208, 420, 423,
	418, 419, 469, 470, 518, 519, 520, 496, 414, 0,
	421, 422, 0, 501, 508, 509, 473, 83, 92, 138,
	244, 184, 117, 233, 403, 404, 417, 110, 427, 0,
	0, 440, 441, 447, 448, 460, 462, 463, 464, 465,
	472, 479, 480, 482, 488, 490, 492, 493, 498, 505,
	524, 85, 86, 93, 99, 105, 109, 113, 116, 121,
	123, 126, 128, 129, 130, 133, 143, 146, 147, 148,
	149, 159, 160, 161, 163, 166, 167, 168, 169, 170,
	173, 174, 175, 176, 177, 178, 179, 185, 188, 194,
	195, 196, 197, 198, 199, 200, 202, 203, 204, 205,
	211, 214, 220, 221, 230, 237, 240, 512, 500, 0,
	455, 515, 426, 445, 523, 446, 449, 486, 411, 468,
	165, 442, 0, 430, 406, 437, 407, 428, 457, 112,
	461, 425, 502, 471, 514, 137, 431, 521, 139, 477,
	0, 209, 153, 0, 0, 459, 504, 466, 497, 454,
	487, 416, 476, 516, 443, 484, 517, 0, 0, 0,
	81, 0, 0, 0, 0, 0, 0, 0, 0, 102,
	0, 481, 511, 439, 483, 485, 405, 478, 0, 409,
	412, 522, 507, 434, 435, 0, 0, 0, 0, 0,
	0, 0, 458, 467, 494, 452, 0, 0, 0, 0,
	0, 0, 0, 0, 432, 0, 475, 0, 0, 0,
	413, 410, 0, 0, 456, 0, 0, 0, 415, 0,
	433, 495, 0, 402, 120, 499, 506, 453, 269, 510,
	451, 450, 513, 491, 0, 213, 122, 136, 98, 84,
	94, 0, 444, 162, 189, 193, 503, 429, 438, 106,
	436, 191, 172, 229, 474, 489, 190, 140, 219, 183,
	228, 238, 239, 216, 236, 243, 206, 87, 215, 227,
	103, 201, 89, 225, 212, 151, 131, 132, 88, 0,
	187, 111, 118, 108, 164, 222, 223, 107, 246, 95,
	235, 91, 400, 234, 158, 218, 226, 152, 145, 90,
	224, 150, 144, 135, 115, 124, 181, 142, 182, 125,
	155, 154, 156, 0, 408, 0, 210, 232, 247, 100,
	424, 217, 241, 242, 0, 0, 101, 119, 114, 180,
	401, 399, 127, 207, 134, 141, 186, 245, 171, 192,
	104, 231, 208, 420, 423, 418, 419, 469, 470, 518,
	519, 520, 496, 414, 0, 421, 422, 0, 501, 508,
	509, 473, 83, 92, 138, 244, 184, 117, 233, 403,
	404, 417, 110, 427, 0, 0, 440, 441, 447, 448,
	460, 462, 463, 464, 465, 472, 479, 480, 482, 488,
	490, 492, 493, 498, 505, 524, 85, 86, 93, 99,
	105, 109, 113, 116, 121, 123, 126, 128, 129, 130,
	133, 143, 146, 147, 148, 149, 159, 160, 161, 163,
	166, 167, 168, 169, 170, 173, 174, 175, 176, 177,
	178, 179, 185, 188, 194, 195, 196, 197, 198, 199,
	200, 202, 203, 204, 205, 211, 214, 220, 221, 230,
	237, 240, 512, 500, 0, 455, 515, 426, 445, 523,
	446, 449, 486, 411, 468, 165, 442, 0, 430, 406,
	437, 407, 428, 457, 112, 461, 425, 502, 471, 514,
	137, 431, 521, 139, 477, 0, 209, 153, 0, 0,
	459, 504, 466, 497, 454, 487, 416, 476, 516, 443,
	484, 517, 0, 0, 0, 267, 0, 0, 0, 0,
	0, 0, 0, 0, 102, 0, 481, 511, 439, 483,
	485, 405, 478, 0, 409, 412, 522, 507, 434, 435,
	0, 0, 0, 0, 0, 0, 0, 458, 467, 494,
	452, 0, 0, 0, 0, 0, 0, 0, 0, 432,
	0, 475, 0, 0, 0, 413, 410, 0, 0, 456,
	0, 0, 0, 415, 0, 433, 495, 0, 402, 120,
	499, 506, 453, 269, 510, 451, 450, 513, 491, 0,
	213, 122, 136, 98, 84, 94, 0, 444, 162, 189,
	193, 503, 429, 438, 106, 436, 191, 172, 229, 474,
	489, 190, 140, 219, 183, 228, 238, 239, 216, 236,
	243, 206, 87, 215, 227, 103, 201, 89, 225, 212,
	151, 131, 132, 88, 0, 187, 111, 118, 108, 164,
	222, 223, 107, 246, 95, 235, 91, 96, 234, 158,
	218, 226, 152, 145, 90, 224, 150, 144, 135, 115,
	124, 181, 142, 182, 125, 155, 154, 156, 0, 408,
	0, 210, 232, 247, 100, 424, 217, 241, 242, 0,
	0, 101, 119, 114, 180, 157, 97, 127, 207, 134,
	141, 186, 245, 171, 192, 104, 231, 208, 420, 423,
	418, 419, 469, 470, 518, 519, 520, 496, 414, 0,
	421, 422, 0, 501, 508, 509, 473, 83, 92, 138,
	244, 184, 117, 233, 403, 404, 417, 110, 427, 0,
	0, 440, 441, 447, 448, 460, 462, 463, 464, 465,
	472, 479, 480, 482, 488, 490, 492, 493, 498, 505,
	524, 85, 86, 93, 99, 105, 109, 113, 116, 121,
	123, 126, 128, 129, 130, 133, 143, 146, 147, 148,
	149, 159, 160, 161, 163, 166, 167, 168, 169, 170,
	173, 174, 175, 176, 177, 178, 179, 185, 188, 194,
	195, 196, 197, 198, 199, 200, 202, 203, 204, 205,
	211, 214, 220, 221, 230, 237, 240, 512, 500, 0,
	455, 515, 426, 445, 523, 446, 449, 486, 411, 468,
	165, 442, 0, 430, 406, 437, 407, 428, 457, 112,
	461, 425, 502, 471, 514, 137, 431, 521, 139, 477,
	0, 209, 153, 0, 0, 459, 504, 466, 497, 454,
	487, 416, 476, 516, 443, 484, 517, 0, 0, 0,
	81, 0, 0, 0, 0, 0, 0, 0, 0, 102,
	0, 481, 511, 439, 483, 485, 405, 478, 0, 409,
	412, 522, 507, 434, 435, 0, 0, 0, 0, 0,
	0, 0, 458, 467, 494, 452, 0, 0, 0, 0,
	0, 0, 0, 0, 432, 0, 475, 0, 0, 0,
	413, 410, 0, 0, 456, 0, 0, 0, 415, 0,
	433, 495, 0, 402, 120, 499, 506, 453, 269, 510,
	451, 450, 513, 491, 0, 213, 122, 136, 98, 84,
	94, 0, 444, 162, 189, 193, 503, 429, 438, 106,
	436, 191, 172, 229, 474, 489, 190, 140, 219, 183,
	228, 238, 239, 216, 236, 243, 206, 87, 215, 738,
	103, 201, 89, 225, 212, 151, 131, 132, 88, 0,
	187, 111, 118, 108, 164, 222, 223, 107, 246, 95,
	235, 91, 400, 234, 158, 218, 226, 152, 145, 90,
	224, 150, 144, 135, 115, 124, 181, 142, 182, 125,
	155, 154, 156, 0, 408, 0, 210, 232, 247, 100,
	424, 217, 241, 242, 0, 0, 101, 119, 114, 180,
	401, 399, 127, 207, 134, 141, 186, 245, 171, 192,
	104, 231, 208, 420, 423, 418, 419, 469, 470, 518,
	519, 520, 496, 414, 0, 421, 422, 0, 501, 508,
	509, 473, 83, 92, 138, 244, 184, 117, 233, 403,
	404, 417, 110, 427, 0, 0, 440, 441, 447, 448,
	460, 462, 463, 464, 465, 472, 479, 480, 482, 488,
	490, 492, 493, 498, 505, 524, 85, 86, 93, 99,
	105, 109, 113, 116, 121, 123, 126, 128, 129, 130,
	133, 143, 146, 147, 148, 149, 159, 160, 161, 163,
	166, 167, 168, 169, 170, 173, 174, 175, 176, 177,
	178, 179, 185, 188, 194, 195, 196, 197, 198, 199,
	200, 202, 203, 204, 205, 211, 214, 220, 221, 230,
	237, 240, 512, 500, 0, 455, 515, 426, 445, 523,
	446, 449, 486, 411, 468, 165, 442, 0, 430, 406,
	437, 407, 428, 457, 112, 461, 425, 502, 471, 514,
	137, 431, 521, 139, 477, 0, 209, 153, 0, 0,
	459, 504, 466, 497, 454, 487, 416, 476, 516, 443,
	484, 517, 0, 0, 0, 81, 0, 0, 0, 0,
	0, 0, 0, 0, 102, 0, 481, 511, 439, 483,
	485, 405, 478, 0, 409, 412, 522, 507, 434, 435,
	0, 0, 0, 0, 0, 0, 0, 458, 467, 494,
	452, 0, 0, 0, 0, 0, 0, 0, 0, 432,
	0, 475, 0, 0, 0, 413, 410, 0, 0, 456,
	0, 0, 0, 415, 0, 433, 495, 0, 402, 120,
	499, 506, 453, 269, 510, 451, 450, 513, 491, 0,
	213, 122, 136, 98, 84, 94, 0, 444, 162, 189,
	193, 503, 429, 438, 106, 436, 191, 172, 229, 474,
	489, 190, 140, 219, 183, 228, 238, 239, 216, 236,
	243, 206, 87, 215, 391, 103, 201, 89, 225, 212,
	151, 131, 132, 88, 0, 187, 111, 118, 108, 164,
	222, 223, 107, 246, 95, 235, 91, 400, 234, 158,
	218, 226, 152, 145, 90, 224, 150, 144, 135, 115,
	124, 181, 142, 182, 125, 155, 154, 156, 0, 408,
	0, 210, 232, 247, 100, 424, 217, 241, 242, 0,
	0, 101, 119, 114, 180, 401, 399, 394, 393, 134,
	141, 186, 245, 171, 192, 104, 231, 208, 420, 423,
	418, 419, 469, 470, 518, 519, 520, 496, 414, 0,
	421, 422, 0, 501, 508, 509, 473, 83, 92, 138,
	244, 184, 117, 233, 403, 404, 417, 110, 427, 0,
	0, 440, 441, 447, 448, 460, 462, 463, 464, 465,
	472, 479, 480, 482, 488, 490, 492, 493, 498, 505,
	524, 85, 86, 93, 99, 105, 109, 113, 116, 121,
	123, 126, 128, 129, 130, 133, 143, 146, 147, 148,
	149, 159, 160, 161, 163, 166, 167, 168, 169, 170,
	173, 174, 175, 176, 177, 178, 179, 185, 188, 194,
	195, 196, 197, 198, 199, 200, 202, 203, 204, 205,
	211, 214, 220, 221, 230, 237, 240, 165, 0, 0,
	931, 0, 326, 0, 0, 0, 112, 0, 323, 0,
	0, 0, 137, 932, 366, 139, 0, 0, 209, 153,
	0, 0, 0, 0, 357, 358, 0, 0, 0, 0,
	0, 0, 0, 0, 55, 0, 0, 324, 345, 344,
	347, 348, 349, 350, 0, 0, 102, 346, 351, 352,
	353, 0, 0, 0, 321, 338, 0, 365, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 335, 336, 317,
	0, 0, 0, 379, 0, 337, 0, 0, 332, 333,
	334, 339, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 120, 0, 0, 0, 269, 0, 0, 377, 0,
	0, 0, 213, 122, 136, 98, 84, 94, 0, 0,
	162, 189, 193, 0, 0, 0, 106, 0, 191, 172,
	229, 0, 0, 190, 140, 219, 183, 228, 238, 239,
	216, 236, 243, 206, 87, 215, 227, 103, 201, 89,
	225, 212, 151, 131, 132, 88, 0, 187, 111, 118,
	108, 164, 222, 223, 107, 246, 95, 235, 91, 96,
	234, 158, 218, 226, 152, 145, 90, 224, 150, 144,
	135, 115, 124, 181, 142, 182, 125, 155, 154, 156,
	0, 0, 0, 210, 232, 247, 100, 0, 217, 241,
	242, 0, 0, 101, 119, 114, 180, 157, 97, 127,
	207, 134, 141, 186, 245, 171, 192, 104, 231, 208,
	367, 378, 373, 374, 371, 372, 370, 369, 368, 380,
	359, 360, 361, 362, 364, 0, 375, 376, 363, 83,
	92, 138, 244, 184, 117, 233, 0, 0, 0, 110,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 85, 86, 93, 99, 105, 109, 113,
	116, 121, 123, 126, 128, 129, 130, 133, 143, 146,
	147, 148, 149, 159, 160, 161, 163, 166, 167, 168,
	169, 170, 173, 174, 175, 176, 177, 178, 179, 185,
	188, 194, 195, 196, 197, 198, 199, 200, 202, 203,
	204, 205, 211, 214, 220, 221, 230, 237, 240, 165,
	0, 0, 0, 0, 326, 0, 0, 0, 112, 0,
	323, 0, 0, 0, 137, 0, 366, 139, 0, 0,
	209, 153, 0, 0, 0, 0, 357, 358, 0, 0,
	0, 0, 0, 0, 1005, 0, 55, 0, 0, 324,
	345, 344, 347, 348, 349, 350, 0, 0, 102, 346,
	351, 352, 353, 1006, 0, 0, 321, 338, 0, 365,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 335,
	336, 0, 0, 0, 0, 379, 0, 337, 0, 0,
	332, 333, 334, 339, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 120, 0, 0, 0, 269, 0, 0,
	377, 0, 0, 0, 213, 122, 136, 98, 84, 94,
	0, 0, 162, 189, 193, 0, 0, 0, 106, 0,
	191, 172, 229, 0, 0, 190, 140, 219, 183, 228,
	238, 239, 216, 236, 243, 206, 87, 215, 227, 103,
	201, 89, 225, 212, 151, 131, 132, 88, 0, 187,
	111, 118, 108, 164, 222, 223, 107, 246, 95, 235,
	91, 96, 234, 158, 218, 226, 152, 145, 90, 224,
	150, 144, 135, 115, 124, 181, 142, 182, 125, 155,
	154, 156, 0, 0, 0, 210, 232, 247, 100, 0,
	217, 241, 242, 0, 0, 101, 119, 114, 180, 157,
	97, 127, 207, 134, 141, 186, 245, 171, 192, 104,
	231, 208, 367, 378, 373, 374, 371, 372, 370, 369,
	368, 380, 359, 360, 361, 362, 364, 0, 375, 376,
	363, 83, 92, 138, 244, 184, 117, 233, 0, 0,
	0, 110, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 85, 86, 93, 99, 105,
	109, 113, 116, 121, 123, 126, 128, 129, 130, 133,
	143, 146, 147, 148, 149, 159, 160, 161, 163, 166,
	167, 168, 169, 170, 173, 174, 175, 176, 177, 178,
	179, 185, 188, 194, 195, 196, 197, 198, 199, 200,
	202, 203, 204, 205, 211, 214, 220, 221, 230, 237,
	240, 165, 0, 0, 0, 0, 326, 0, 0, 0,
	112, 0, 323, 0, 0, 0, 137, 0, 366, 139,
	0, 0, 209, 153, 0, 0, 0, 0, 357, 358,
	0, 0, 0, 0, 0, 0, 0, 0, 55, 0,
	610, 324, 345, 344, 347, 348, 349, 350, 0, 0,
	102, 346, 351, 352, 353, 0, 0, 0, 321, 338,
	0, 365, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 335, 336, 0, 0, 0, 0, 379, 0, 337,
	0, 0, 332, 333, 334, 339, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 120, 0, 0, 0, 269,
	0, 0, 377, 0, 0, 0, 213, 122, 136, 98,
	84, 94, 0, 0, 162, 189, 193, 0, 0, 0,
	106, 0, 191, 172, 229, 0, 0, 190, 140, 219,
	183, 228, 238, 239, 216, 236, 243, 206, 87, 215,
	227, 103, 201, 89, 225, 212, 151, 131, 132, 88,
	0, 187, 111, 118, 108, 164, 222, 223, 107, 246,
	95, 235, 91, 96, 234, 158, 218, 226, 152, 145,
	90, 224, 150, 144, 135, 115, 124, 181, 142, 182,
	125, 155, 154, 156, 0, 0, 0, 210, 232, 247,
	100, 0, 217, 241, 242, 0, 0, 101, 119, 114,
	180, 157, 97, 127, 207, 134, 141, 186, 245, 171,
	192, 104, 231, 208, 367, 378, 373, 374, 371, 372,
	370, 369, 368, 380, 359, 360, 361, 362, 364, 0,
	375, 376, 363, 83, 92, 138, 244, 184, 117, 233,
	0, 0, 0, 110, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 85, 86, 93,
	99, 105, 109, 113, 116, 121, 123, 126, 128, 129,
	130, 133, 143, 146, 147, 148, 149, 159, 160, 161,
	163, 166, 167, 168, 169, 170, 173, 174, 175, 176,
	177, 178, 179, 185, 188, 194, 195, 196, 197, 198,
	199, 200, 202, 203, 204, 205, 211, 214, 220, 221,
	230, 237, 240, 165, 0, 0, 0, 0, 326, 0,
	0, 0, 112, 0, 323, 0, 0, 0, 137, 0,
	366, 139, 0, 0, 209, 153, 0, 0, 0, 0,
	357, 358, 0, 0, 0, 0, 0, 0, 0, 0,
	55, 0, 0, 324, 345, 344, 347, 348, 349, 350,
	0, 0, 102, 346, 351, 352, 353, 0, 0, 0,
	321, 338, 0, 365, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 335, 336, 317, 0, 0, 0, 379,
	0, 337, 0, 0, 332, 333, 334, 339, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 120, 0, 0,
	0, 269, 0, 0, 377, 0, 0, 0, 213, 122,
	136, 98, 84, 94, 0, 0, 162, 189, 193, 0,
	0, 0, 106, 0, 191, 172, 229, 0, 0, 190,
	140, 219, 183, 228, 238, 239, 216, 236, 243, 206,
	87, 215, 227, 103, 201, 89, 225, 212, 151, 131,
	132, 88, 0, 187, 111, 118, 108, 164, 222, 223,
	107, 246, 95, 235, 91, 96, 234, 158, 218, 226,
	152, 145, 90, 224, 150, 144, 135, 115, 124, 181,
	142, 182, 125, 155, 154, 156, 0, 0, 0, 210,
	232, 247, 100, 0, 217, 241, 242, 0, 0, 101,
	119, 114, 180, 157, 97, 127, 207, 134, 141, 186,
	245, 171, 192, 104, 231, 208, 367, 378, 373, 374,
	371, 372, 370, 369, 368, 380, 359, 360, 361, 362,
	364, 0, 375, 376, 363, 83, 92, 138, 244, 184,
	117, 233, 0, 0, 0, 110, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 85,
	86, 93, 99, 105, 109, 113, 116, 121, 123, 126,
	128, 129, 130, 133, 143, 146, 147, 148, 149, 159,
	160, 161, 163, 166, 167, 168, 169, 170, 173, 174,
	175, 176, 177, 178, 179, 185, 188, 194, 195, 196,
	197, 198, 199, 200, 202, 203, 204, 205, 211, 214,
	220, 221, 230, 237, 240, 165, 0, 0, 0, 0,
	326, 0, 0, 0, 112, 0, 323, 0, 0, 0,
	137, 0, 366, 139, 0, 0, 209, 153, 0, 0,
	0, 0, 357, 358, 0, 0, 0, 0, 0, 0,
	0, 0, 55, 0, 0, 324, 345, 947, 347, 348,
	349, 350, 0, 0, 102, 346, 351, 352, 353, 0,
	0, 0, 321, 338, 0, 365, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 335, 336, 317, 0, 0,
	0, 379, 0, 337, 0, 0, 332, 333, 334, 339,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 120,
	0, 0, 0, 269, 0, 0, 377, 0, 0, 0,
	213, 122, 136, 98, 84, 94, 0, 0, 162, 189,
	193, 0, 0, 0, 106, 0, 191, 172, 229, 0,
	0, 190, 140, 219, 183, 228, 238, 239, 216, 236,
	243, 206, 87, 215, 227, 103, 201, 89, 225, 212,
	151, 131, 132, 88, 0, 187, 111, 118, 108, 164,
	222, 223, 107, 246, 95, 235, 91, 96, 234, 158,
	218, 226, 152, 145, 90, 224, 150, 144, 135, 115,
	124, 181, 142, 182, 125, 155, 154, 156, 0, 0,
	0, 210, 232, 247, 100, 0, 217, 241, 242, 0,
	0, 101, 119, 114, 180, 157, 97, 127, 207, 134,
	141, 186, 245, 171, 192, 104, 231, 208, 367, 378,
	373, 374, 371, 372, 370, 369, 368, 380, 359, 360,
	361, 362, 364, 0, 375, 376, 363, 83, 92, 138,
	244, 184, 117, 233, 0, 0, 0, 110, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 85, 86, 93, 99, 105, 109, 113, 116, 121,
	123, 126, 128, 129, 130, 133, 143, 146, 147, 148,
	149, 159, 160, 161, 163, 166, 167, 168, 169, 170,
	173, 174, 175, 176, 177, 178, 179, 185, 188, 194,
	195, 196, 197, 198, 199, 200, 202, 203, 204, 205,
	211, 214, 220, 221, 230, 237, 240, 165, 0, 0,
	0, 0, 326, 0, 0, 0, 112, 0, 323, 0,
	0, 0, 137, 0, 366, 139, 0, 0, 209, 153,
	0, 0, 0, 0, 357, 358, 0, 0, 0, 0,
	0, 0, 0, 0, 55, 0, 0, 324, 345, 944,
	347, 348, 349, 350, 0, 0, 102, 346, 351, 352,
	353, 0, 0, 0, 321, 338, 0, 365, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 335, 336, 317,
	0, 0, 0, 379, 0, 337, 0, 0, 332, 333,
	334, 339, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 120, 0, 0, 0, 269, 0, 0, 377, 0,
	0, 0, 213, 122, 136, 98, 84, 94, 0, 0,
	162, 189, 193, 0, 0, 0, 106, 0, 191, 172,
	229, 0, 0, 190, 140, 219, 183, 228, 238, 239,
	216, 236, 243, 206, 87, 215, 227, 103, 201, 89,
	225, 212, 151, 131, 132, 88, 0, 187, 111, 118,
	108, 164, 222, 223, 107, 246, 95, 235, 91, 96,
	234, 158, 218, 226, 152, 145, 90, 224, 150, 144,
	135, 115, 124, 181, 142, 182, 125, 155, 154, 156,
	0, 0, 0, 210, 232, 247, 100, 0, 217, 241,
	242, 0, 0, 101, 119, 114, 180, 157, 97, 127,
	207, 134, 141, 186, 245, 171, 192, 104, 231, 208,
	367, 378, 373, 374, 371, 372, 370, 369, 368, 380,
	359, 360, 361, 362, 364, 0, 375, 376, 363, 83,
	92, 138, 244, 184, 117, 233, 0, 0, 0, 110,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 85, 86, 93, 99, 105, 109, 113,
	116, 121, 123, 126, 128, 129, 130, 133, 143, 146,
	147, 148, 149, 159, 160, 161, 163, 166, 167, 168,
	169, 170, 173, 174, 175, 176, 177, 178, 179, 185,
	188, 194, 195, 196, 197, 198, 199, 200, 202, 203,
	204, 205, 211, 214, 220, 221, 230, 237, 240, 24,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 165, 0, 0, 0, 0, 326, 0, 0, 0,
	112, 0, 323, 0, 0, 0, 137, 0, 366, 139,
	0, 0, 209, 153, 0, 0, 0, 0, 357, 358,
	0, 0, 0, 0, 0, 0, 0, 0, 55, 0,
	0, 324, 345, 344, 347, 348, 349, 350, 0, 0,
	102, 346, 351, 352, 353, 0, 0, 0, 321, 338,
	0, 365, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 335, 336, 0, 0, 0, 0, 379, 0, 337,
	0, 0, 332, 333, 334, 339, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 120, 0, 0, 0, 269,
	0, 0, 377, 0, 0, 0, 213, 122, 136, 98,
	84, 94, 0, 0, 162, 189, 193, 0, 0, 0,
	106, 0, 191, 172, 229, 0, 0, 190, 140, 219,
	183, 228, 238, 239, 216, 236, 243, 206, 87, 215,
	227, 103, 201, 89, 225, 212, 151, 131, 132, 88,
	0, 187, 111, 118, 108, 164, 222, 223, 107, 246,
	95, 235, 91, 96, 234, 158, 218, 226, 152, 145,
	90, 224, 150, 144, 135, 115, 124, 181, 142, 182,
	125, 155, 154, 156, 0, 0, 0, 210, 232, 247,
	100, 0, 217, 241, 242, 0, 0, 101, 119, 114,
	180, 157, 97, 127, 207, 134, 141, 186, 245, 171,
	192, 104, 231, 208, 367, 378, 373, 374, 371, 372,
	370, 369, 368, 380, 359, 360, 361, 362, 364, 0,
	375, 376, 363, 83, 92, 138, 244, 184, 117, 233,
	0, 0, 0, 110, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 85, 86, 93,
	99, 105, 109, 113, 116, 121, 123, 126, 128, 129,
	130, 133, 143, 146, 147, 148, 149, 159, 160, 161,
	163, 166, 167, 168, 169, 170, 173, 174, 175, 176,
	177, 178, 179, 185, 188, 194, 195, 196, 197, 198,
	199, 200, 202, 203, 204, 205, 211, 214, 220, 221,
	230, 237, 240, 165, 0, 0, 0, 0, 326, 0,
	0, 0, 112, 0, 323, 0, 0, 0, 137, 0,
	366, 139, 0, 0, 209, 153, 0, 0, 0, 0,
	357, 358, 0, 0, 0, 0, 0, 0, 0, 0,
	55, 0, 0, 324, 345, 344, 347, 348, 349, 350,
	0, 0, 102, 346, 351, 352, 353, 0, 0, 0,
	321, 338, 0, 365, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 335, 336, 0, 0, 0, 0, 379,
	0, 337, 0, 0, 332, 333, 334, 339, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 120, 0, 0,
	0, 269, 0, 0, 377, 0, 0, 0, 213, 122,
	136, 98, 84, 94, 0, 0, 162, 189, 193, 0,
	0, 0, 106, 0, 191, 172, 229, 0, 0, 190,
	140, 219, 183, 228, 238, 239, 216, 236, 243, 206,
	87, 215, 227, 103, 201, 89, 225, 212, 151, 131,
	132, 88, 0, 187, 111, 118, 108, 164, 222, 223,
	107, 246, 95, 235, 91, 96, 234, 158, 218, 226,
	152, 145, 90, 224, 150, 144, 135, 115, 124, 181,
	142, 182, 125, 155, 154, 156, 0, 0, 0, 210,
	232, 247, 100, 0, 217, 241, 242, 0, 0, 101,
	119, 114, 180, 157, 97, 127, 207, 134, 141, 186,
	245, 171, 192, 104, 231, 208, 367, 378, 373, 374,
	371, 372, 370, 369, 368, 380, 359, 360, 361, 362,
	364, 0, 375, 376, 363, 83, 92, 138, 244, 184,
	117, 233, 0, 0, 0, 110, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 85,
	86, 93, 99, 105, 109, 113, 116, 121, 123, 126,
	128, 129, 130, 133, 143, 146, 147, 148, 149, 159,
	160, 161, 163, 166, 167, 168, 169, 170, 173, 174,
	175, 176, 177, 178, 179, 185, 188, 194, 195, 196,
	197, 198, 199, 200, 202, 203, 204, 205, 211, 214,
	220, 221, 230, 237, 240, 165, 0, 0, 0, 0,
	0, 0, 0, 0, 112, 0, 0, 0, 0, 0,
	137, 0, 366, 139, 0, 0, 209, 153, 0, 0,
	0, 0, 357, 358, 0, 0, 0, 0, 0, 0,
	0, 0, 55, 0, 0, 324, 345, 344, 347, 348,
	349, 350, 0, 0, 102, 346, 351, 352, 353, 0,
	0, 0, 0, 338, 0, 365, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 335, 336, 0, 0, 0,
	0, 379, 0, 337, 0, 0, 332, 333, 334, 339,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 120,
	0, 0, 0, 269, 0, 0, 377, 0, 0, 0,
	213, 122, 136, 98, 84, 94, 0, 0, 162, 189,
	193, 0, 0, 0, 106, 0, 191, 172, 229, 1465,
	0, 190, 140, 219, 183, 228, 238, 239, 216, 236,
	243, 206, 87, 215, 227, 103, 201, 89, 225, 212,
	151, 131, 132, 88, 0, 187, 111, 118, 108, 164,
	222, 223, 107, 246, 95, 235, 91, 96, 234, 158,
	218, 226, 152, 145, 90, 224, 150, 144, 135, 115,
	124, 181, 142, 182, 125, 155, 154, 156, 0, 0,
	0, 210, 232, 247, 100, 0, 217, 241, 242, 0,
	0, 101, 119, 114, 180, 157, 97, 127, 207, 134,
	141, 186, 245, 171, 192, 104, 231, 208, 367, 378,
	373, 374, 371, 372, 370, 369, 368, 380, 359, 360,
	361, 362, 364, 0, 375, 376, 363, 83, 92, 138,
	244, 184, 117, 233, 0, 0, 0, 110, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 85, 86, 93, 99, 105, 109, 113, 116, 121,
	123, 126, 128, 129, 130, 133, 143, 146, 147, 148,
	149, 159, 160, 161, 163, 166, 167, 168, 169, 170,
	173, 174, 175, 176, 177, 178, 179, 185, 188, 194,
	195, 196, 197, 198, 199, 200, 202, 203, 204, 205,
	211, 214, 220, 221, 230, 237, 240, 165, 0, 0,
	0, 0, 0, 0, 0, 0, 112, 0, 0, 0,
	0, 0, 137, 0, 366, 139, 0, 0, 209, 153,
	0, 0, 0, 0, 357, 358, 0, 0, 0, 0,
	0, 0, 0, 0, 55, 0, 610, 324, 345, 344,
	347, 348, 349, 350, 0, 0, 102, 346, 351, 352,
	353, 0, 0, 0, 0, 338, 0, 365, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 335, 336, 0,
	0, 0, 0, 379, 0, 337, 0, 0, 332, 333,
	334, 339, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 120, 0, 0, 0, 269, 0, 0, 377, 0,
	0, 0, 213, 122, 136, 98, 84, 94, 0, 0,
	162, 189, 193, 0, 0, 0, 106, 0, 191, 172,
	229, 0, 0, 190, 140, 219, 183, 228, 238, 239,
	216, 236, 243, 206, 87, 215, 227, 103, 201, 89,
	225, 212, 151, 131, 132, 88, 0, 187, 111, 118,
	108, 164, 222, 223, 107, 246, 95, 235, 91, 96,
	234, 158, 218, 226, 152, 145, 90, 224, 150, 144,
	135, 115, 124, 181, 142, 182, 125, 155, 154, 156,
	0, 0, 0, 210, 232, 247, 100, 0, 217, 241,
	242, 0, 0, 101, 119, 114, 180, 157, 97, 127,
	207, 134, 141, 186, 245, 171, 192, 104, 231, 208,
	367, 378, 373, 374, 371, 372, 370, 369, 368, 380,
	359, 360, 361, 362, 364, 0, 375, 376, 363, 83,
	92, 138, 244, 184, 117, 233, 0, 0, 0, 110,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 85, 86, 93, 99, 105, 109, 113,
	116, 121, 123, 126, 128, 129, 130, 133, 143, 146,
	147, 148, 149, 159, 160, 161, 163, 166, 167, 168,
	169, 170, 173, 174, 175, 176, 177, 178, 179, 185,
	188, 194, 195, 196, 197, 198, 199, 200, 202, 203,
	204, 205, 211, 214, 220, 221, 230, 237, 240, 165,
	0, 0, 0, 0, 0, 0, 0, 0, 112, 0,
	0, 0, 0, 0, 137, 0, 366, 139, 0, 0,
	209, 153, 0, 0, 0, 0, 357, 358, 0, 0,
	0, 0, 0, 0, 0, 0, 55, 0, 0, 324,
	345, 344, 347, 348, 349, 350, 0, 0, 102, 346,
	351, 352, 353, 0, 0, 0, 0, 338, 0, 365,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 335,
	336, 0, 0, 0, 0, 379, 0, 337, 0, 0,
	332, 333, 334, 339, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 120, 0, 0, 0, 269, 0, 0,
	377, 0, 0, 0, 213, 122, 136, 98, 84, 94,
	0, 0, 162, 189, 193, 0, 0, 0, 106, 0,
	191, 172, 229, 0, 0, 190, 140, 219, 183, 228,
	238, 239, 216, 236, 243, 206, 87, 215, 227, 103,
	201, 89, 225, 212, 151, 131, 132, 88, 0, 187,
	111, 118, 108, 164, 222, 223, 107, 246, 95, 235,
	91, 96, 234, 158, 218, 226, 152, 145, 90, 224,
	150, 144, 135, 115, 124, 181, 142, 182, 125, 155,
	154, 156, 0, 0, 0, 210, 232, 247, 100, 0,
	217, 241, 242, 0, 0, 101, 119, 114, 180, 157,
	97, 127, 207, 134, 141, 186, 245, 171, 192, 104,
	231, 208, 367, 378, 373, 374, 371, 372, 370, 369,
	368, 380, 359, 360, 361, 362, 364, 0, 375, 376,
	363, 83, 92, 138, 244, 184, 117, 233, 0, 0,
	0, 110, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 85, 86, 93, 99, 105,
	109, 113, 116, 121, 123, 126, 128, 129, 130, 133,
	143, 146, 147, 148, 149, 159, 160, 161, 163, 166,
	167, 168, 169, 170, 173, 174, 175, 176, 177, 178,
	179, 185, 188, 194, 195, 196, 197, 198, 199, 200,
	202, 203, 204, 205, 211, 214, 220, 221, 230, 237,
	240, 165, 0, 0, 0, 0, 0, 0, 0, 0,
	112, 0, 0, 0, 0, 0, 137, 0, 0, 139,
	0, 0, 209, 153, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 81, 0, 0, 0, 0, 0, 0, 0, 0,
	102, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 645, 644, 654,
	655, 647, 648, 649, 650, 651, 652, 653, 646, 0,
	0, 656, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 120, 0, 0, 0, 269,
	0, 0, 0, 0, 0, 0, 213, 122, 136, 98,
	84, 94, 0, 0, 162, 189, 193, 0, 0, 0,
	106, 0, 191, 172, 229, 0, 0, 190, 140, 219,
	183, 228, 238, 239, 216, 236, 243, 206, 87, 215,
	227, 103, 201, 89, 225, 212, 151, 131, 132, 88,
	0, 187, 111, 118, 108, 164, 222, 223, 107, 246,
	95, 235, 91, 96, 234, 158, 218, 226, 152, 145,
	90, 224, 150, 144, 135, 115, 124, 181, 142, 182,
	125, 155, 154, 156, 0, 0, 0, 210, 232, 247,
	100, 0, 217, 241, 242, 0, 0, 101, 119, 114,
	180, 157, 97, 127, 207, 134, 141, 186, 245, 171,
	192, 104, 231, 208, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 83, 92, 138, 244, 184, 117, 233,
	0, 0, 0, 110, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 85, 86, 93,
	99, 105, 109, 113, 116, 121, 123, 126, 128, 129,
	130, 133, 143, 146, 147, 148, 149, 159, 160, 161,
	163, 166, 167, 168, 169, 170, 173, 174, 175, 176,
	177, 178, 179, 185, 188, 194, 195, 196, 197, 198,
	199, 200, 202, 203, 204, 205, 211, 214, 220, 221,
	230, 237, 240, 165, 0, 0, 0, 633, 0, 0,
	0, 0, 112, 0, 0, 0, 0, 0, 137, 0,
	0, 139, 0, 0, 209, 153, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 81, 0, 635, 0, 0, 0, 0,
	0, 0, 102, 0, 0, 0, 0, 0, 630, 629,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 631, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 120, 0, 0,
	0, 269, 0, 0, 0, 0, 0, 0, 213, 122,
	136, 98, 84, 94, 0, 0, 162, 189, 193, 0,
	0, 0, 106, 0, 191, 172, 229, 0, 0, 190,
	140, 219, 183, 228, 238, 239, 216, 236, 243, 206,
	87, 215, 227, 103, 201, 89, 225, 212, 151, 131,
	132, 88, 0, 187, 111, 118, 108, 164, 222, 223,
	107, 246, 95, 235, 91, 96, 234, 158, 218, 226,
	152, 145, 90, 224, 150, 144, 135, 115, 124, 181,
	142, 182, 125, 155, 154, 156, 0, 0, 0, 210,
	232, 247, 100, 0, 217, 241, 242, 0, 0, 101,
	119, 114, 180, 157, 97, 127, 207, 134, 141, 186,
	245, 171, 192, 104, 231, 208, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 83, 92, 138, 244, 184,
	117, 233, 0, 0, 0, 110, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 85,
	86, 93, 99, 105, 109, 113, 116, 121, 123, 126,
	128, 129, 130, 133, 143, 146, 147, 148, 149, 159,
	160, 161, 163, 166, 167, 168, 169, 170, 173, 174,
	175, 176, 177, 178, 179, 185, 188, 194, 195, 196,
	197, 198, 199, 200, 202, 203, 204, 205, 211, 214,
	220, 221, 230, 237, 240, 165, 0, 0, 0, 0,
	0, 0, 0, 0, 112, 0, 0, 0, 0, 0,
	137, 0, 0, 139, 0, 0, 209, 153, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 81, 0, 0, 0, 0,
	0, 0, 0, 0, 102, 0, 0, 0, 0, 0,
	75, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 120,
	77, 78, 0, 74, 0, 0, 0, 79, 0, 0,
	213, 122, 136, 98, 84, 94, 0, 0, 162, 189,
	193, 0, 0, 0, 106, 0, 191, 172, 229, 0,
	0, 190, 140, 219, 183, 228, 238, 239, 216, 236,
	243, 206, 87, 215, 227, 103, 201, 89, 225, 212,
	151, 131, 132, 88, 0, 187, 111, 118, 108, 164,
	222, 223, 107, 246, 95, 235, 91, 96, 234, 158,
	218, 226, 152, 145, 90, 224, 150, 144, 135, 115,
	124, 181, 142, 182, 125, 155, 154, 156, 0, 0,
	0, 210, 232, 247, 100, 0, 217, 241, 242, 0,
	0, 101, 119, 114, 180, 157, 97, 127, 207, 134,
	141, 186, 245, 171, 192, 104, 231, 208, 0, 76,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 83, 92, 138,
	244, 184, 117, 233, 0, 0, 0, 110, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 85, 86, 93, 99, 105, 109, 113, 116, 121,
	123, 126, 128, 129, 130, 133, 143, 146, 147, 148,
	149, 159, 160, 161, 163, 166, 167, 168, 169, 170,
	173, 174, 175, 176, 177, 178, 179, 185, 188, 194,
	195, 196, 197, 198, 199, 200, 202, 203, 204, 205,
	211, 214, 220, 221, 230, 237, 240, 165, 0, 0,
	0, 988, 0, 0, 0, 0, 112, 0, 0, 0,
	0, 0, 137, 0, 0, 139, 0, 0, 209, 153,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 267, 0, 990,
	0, 0, 0, 0, 0, 0, 102, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 120, 0, 0, 0, 269, 0, 0, 0, 0,
	0, 0, 213, 122, 136, 98, 84, 94, 0, 0,
	162, 189, 193, 0, 0, 0, 106, 0, 191, 172,
	229, 0, 986, 190, 140, 219, 183, 228, 238, 239,
	216, 236, 243, 206, 87, 215, 227, 103, 201, 89,
	225, 212, 151, 131, 132, 88, 0, 187, 111, 118,
	108, 164, 222, 223, 107, 246, 95, 235, 91, 96,
	234, 158, 218, 226, 152, 145, 90, 224, 150, 144,
	135, 115, 124, 181, 142, 182, 125, 155, 154, 156,
	0, 0, 0, 210, 232, 247, 100, 0, 217, 241,
	242, 0, 0, 101, 119, 114, 180, 157, 97, 127,
	207, 134, 141, 186, 245, 171, 192, 104, 231, 208,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 83,
	92, 138, 244, 184, 117, 233, 0, 0, 0, 110,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 85, 86, 93, 99, 105, 109, 113,
	116, 121, 123, 126, 128, 129, 130, 133, 143, 146,
	147, 148, 149, 159, 160, 161, 163, 166, 167, 168,
	169, 170, 173, 174, 175, 176, 177, 178, 179, 185,
	188, 194, 195, 196, 197, 198, 199, 200, 202, 203,
	204, 205, 211, 214, 220, 221, 230, 237, 240, 165,
	0, 0, 0, 988, 0, 0, 0, 0, 112, 0,
	0, 0, 0, 0, 137, 0, 0, 139, 0, 0,
	209, 153, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 267,
	0, 990, 0, 0, 0, 0, 0, 0, 102, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 120, 0, 0, 0, 269, 0, 0,
	0, 0, 0, 0, 213, 122, 136, 98, 84, 94,
	0, 0, 162, 189, 193, 0, 0, 0, 106, 0,
	191, 172, 229, 0, 0, 190, 140, 219, 183, 228,
	238, 239, 216, 236, 243, 206, 87, 215, 227, 103,
	201, 89, 225, 212, 151, 131, 132, 88, 0, 187,
	111, 118, 108, 164, 222, 223, 107, 246, 95, 235,
	91, 96, 234, 158, 218, 226, 152, 145, 90, 224,
	150, 144, 135, 115, 124, 181, 142, 182, 125, 155,
	154, 156, 0, 0, 0, 210, 232, 247, 100, 0,
	217, 241, 242, 0, 0, 101, 119, 114, 180, 157,
	97, 127, 207, 134, 141, 186, 245, 171, 192, 104,
	231, 208, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 83, 92, 138, 244, 184, 117, 233, 0, 0,
	0, 110, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 85, 86, 93, 99, 105,
	109, 113, 116, 121, 123, 126, 128, 129, 130, 133,
	143, 146, 147, 148, 149, 159, 160, 161, 163, 166,
	167, 168, 169, 170, 173, 174, 175, 176, 177, 178,
	179, 185, 188, 194, 195, 196, 197, 198, 199, 200,
	202, 203, 204, 205, 211, 214, 220, 221, 230, 237,
	240, 24, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 165, 0, 0, 0, 0, 0, 0,
	0, 0, 112, 0, 0, 0, 0, 0, 137, 0,
	0, 139, 0, 0, 209, 153, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	55, 0, 0, 81, 0, 0, 0, 0, 0, 0,
	0, 0, 102, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 120, 0, 0,
	0, 269, 0, 0, 0, 0, 0, 0, 213, 122,
	136, 98, 84, 94, 0, 0, 162, 189, 193, 0,
	0, 0, 106, 0, 191, 172, 229, 0, 0, 190,
	140, 219, 183, 228, 238, 239, 216, 236, 243, 206,
	87, 215, 227, 103, 201, 89, 225, 212, 151, 131,
	132, 88, 0, 187, 111, 118, 108, 164, 222, 223,
	107, 246, 95, 235, 91, 96, 234, 158, 218, 226,
	152, 145, 90, 224, 150, 144, 135, 115, 124, 181,
	142, 182, 125, 155, 154, 156, 0, 0, 0, 210,
	232, 247, 100, 0, 217, 241, 242, 0, 0, 101,
	119, 114, 180, 157, 97, 127, 207, 134, 141, 186,
	245, 171, 192, 104, 231, 208, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 83, 92, 138, 244, 184,
	117, 233, 0, 0, 0, 110, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 85,
	86, 93, 99, 105, 109, 113, 116, 121, 123, 126,
	128, 129, 130, 133, 143, 146, 147, 148, 149, 159,
	160, 161, 163, 166, 167, 168, 169, 170, 173, 174,
	175, 176, 177, 178, 179, 185, 188, 194, 195, 196,
	197, 198, 199, 200, 202, 203, 204, 205, 211, 214,
	220, 221, 230, 237, 240, 24, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 165, 0, 0,
	0, 0, 0, 0, 0, 0, 112, 0, 0, 0,
	0, 0, 137, 0, 0, 139, 0, 0, 209, 153,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 55, 0, 0, 267, 0, 0,
	0, 0, 0, 0, 0, 0, 102, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 120, 0, 0, 0, 269, 0, 0, 0, 0,
	0, 0, 213, 122, 136, 98, 84, 94, 0, 0,
	162, 189, 193, 0, 0, 0, 106, 0, 191, 172,
	229, 0, 0, 190, 140, 219, 183, 228, 238, 239,
	216, 236, 243, 206, 87, 215, 227, 103, 201, 89,
	225, 212, 151, 131, 132, 88, 0, 187, 111, 118,
	108, 164, 222, 223, 107, 246, 95, 235, 91, 96,
	234, 158, 218, 226, 152, 145, 90, 224, 150, 144,
	135, 115, 124, 181, 142, 182, 125, 155, 154, 156,
	0, 0, 0, 210, 232, 247, 100, 0, 217, 241,
	242, 0, 0, 101, 119, 114, 180, 157, 97, 127,
	207, 134, 141, 186, 245, 171, 192, 104, 231, 208,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 83,
	92, 138, 244, 184, 117, 233, 0, 0, 0, 110,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 85, 86, 93, 99, 105, 109, 113,
	116, 121, 123, 126, 128, 129, 130, 133, 143, 146,
	147, 148, 149, 159, 160, 161, 163, 166, 167, 168,
	169, 170, 173, 174, 175, 176, 177, 178, 179, 185,
	188, 194, 195, 196, 197, 198, 199, 200, 202, 203,
	204, 205, 211, 214, 220, 221, 230, 237, 240, 165,
	0, 0, 0, 0, 0, 0, 0, 0, 112, 0,
	0, 0, 0, 0, 137, 0, 0, 139, 0, 0,
	209, 153, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 81,
	0, 0, 882, 0, 0, 883, 0, 0, 102, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 120, 0, 0, 0, 269, 0, 0,
	0, 0, 0, 0, 213, 122, 136, 98, 84, 94,
	0, 0, 162, 189, 193, 0, 0, 0, 106, 0,
	191, 172, 229, 0, 0, 190, 140, 219, 183, 228,
	238, 239, 216, 236, 243, 206, 87, 215, 227, 103,
	201, 89, 225, 212, 151, 131, 132, 88, 0, 187,
	111, 118, 108, 164, 222, 223, 107, 246, 95, 235,
	91, 96, 234, 158, 218, 226, 152, 145, 90, 224,
	150, 144, 135, 115, 124, 181, 142, 182, 125, 155,
	154, 156, 0, 0, 0, 210, 232, 247, 100, 0,
	217, 241, 242, 0, 0, 101, 119, 114, 180, 157,
	97, 127, 207, 134, 141, 186, 245, 171, 192, 104,
	231, 208, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 83, 92, 138, 244, 184, 117, 233, 0, 0,
	0, 110, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 85, 86, 93, 99, 105,
	109, 113, 116, 121, 123, 126, 128, 129, 130, 133,
	143, 146, 147, 148, 149, 159, 160, 161, 163, 166,
	167, 168, 169, 170, 173, 174, 175, 176, 177, 178,
	179, 185, 188, 194, 195, 196, 197, 198, 199, 200,
	202, 203, 204, 205, 211, 214, 220, 221, 230, 237,
	240, 165, 0, 0, 0, 0, 0, 0, 0, 0,
	112, 0, 747, 0, 0, 0, 137, 0, 0, 139,
	0, 0, 209, 153, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 81, 0, 746, 0, 0, 0, 0, 0, 0,
	102, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 120, 0, 0, 0, 269,
	0, 0, 0, 0, 0, 0, 213, 122, 136, 98,
	84, 94, 0, 0, 162, 189, 193, 0, 0, 0,
	106, 0, 191, 172, 229, 0, 0, 190, 140, 219,
	183, 228, 238, 239, 216, 236, 243, 206, 87, 215,
	227, 103, 201, 89, 225, 212, 151, 131, 132, 88,
	0, 187, 111, 118, 108, 164, 222, 223, 107, 246,
	95, 235, 91, 96, 234, 158, 218, 226, 152, 145,
	90, 224, 150, 144, 135, 115, 124, 181, 142, 182,
	125, 155, 154, 156, 0, 0, 0, 210, 232, 247,
	100, 0, 217, 241, 242, 0, 0, 101, 119, 114,
	180, 157, 97, 127, 207, 134, 141, 186, 245, 171,
	192, 104, 231, 208, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 83, 92, 138, 244, 184, 117, 233,
	0, 0, 0, 110, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 85, 86, 93,
	99, 105, 109, 113, 116, 121, 123, 126, 128, 129,
	130, 133, 143, 146, 147, 148, 149, 159, 160, 161,
	163, 166, 167, 168, 169, 170, 173, 174, 175, 176,
	177, 178, 179, 185, 188, 194, 195, 196, 197, 198,
	199, 200, 202, 203, 204, 205, 211, 214, 220, 221,
	230, 237, 240, 165, 0, 0, 0, 0, 0, 0,
	0, 0, 112, 0, 0, 0, 0, 0, 137, 0,
	0, 139, 0, 0, 209, 153, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	55, 0, 0, 267, 0, 0, 0, 0, 0, 0,
	0, 0, 102, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 120, 0, 0,
	0, 269, 0, 0, 0, 0, 0, 0, 213, 122,
	136, 98, 84, 94, 0, 0, 162, 189, 193, 0,
	0, 0, 106, 0, 191, 172, 229, 0, 0, 190,
	140, 219, 183, 228, 238, 239, 216, 236, 243, 206,
	87, 215, 227, 103, 201, 89, 225, 212, 151, 131,
	132, 88, 0, 187, 111, 118, 108, 164, 222, 223,
	107, 246, 95, 235, 91, 96, 234, 158, 218, 226,
	152, 145, 90, 224, 150, 144, 135, 115, 124, 181,
	142, 182, 125, 155, 154, 156, 0, 0, 0, 210,
	232, 247, 100, 0, 217, 241, 242, 0, 0, 101,
	119, 114, 180, 157, 97, 127, 207, 134, 141, 186,
	245, 171, 192, 104, 231, 208, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 83, 92, 138, 244, 184,
	117, 233, 0, 0, 0, 110, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 85,
	86, 93, 99, 105, 109, 113, 116, 121, 123, 126,
	128, 129, 130, 133, 143, 146, 147, 148, 149, 159,
	160, 161, 163, 166, 167, 168, 169, 170, 173, 174,
	175, 176, 177, 178, 179, 185, 188, 194, 195, 196,
	197, 198, 199, 200, 202, 203, 204, 205, 211, 214,
	220, 221, 230, 237, 240, 165, 0, 0, 0, 0,
	0, 0, 0, 0, 112, 0, 0, 0, 0, 0,
	137, 0, 0, 139, 0, 0, 209, 153, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 267, 0, 990, 0, 0,
	0, 0, 0, 0, 102, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 120,
	0, 0, 0, 269, 0, 0, 0, 0, 0, 0,
	213, 122, 136, 98, 84, 94, 0, 0, 162, 189,
	193, 0, 0, 0, 106, 0, 191, 172, 229, 0,
	0, 190, 140, 219, 183, 228, 238, 239, 216, 236,
	243, 206, 87, 215, 227, 103, 201, 89, 225, 212,
	151, 131, 132, 88, 0, 187, 111, 118, 108, 164,
	222, 223, 107, 246, 95, 235, 91, 96, 234, 158,
	218, 226, 152, 145, 90, 224, 150, 144, 135, 115,
	124, 181, 142, 182, 125, 155, 154, 156, 0, 0,
	0, 210, 232, 247, 100, 0, 217, 241, 242, 0,
	0, 101, 119, 114, 180, 157, 97, 127, 207, 134,
	141, 186, 245, 171, 192, 104, 231, 208, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 83, 92, 138,
	244, 184, 117, 233, 0, 0, 0, 110, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 85, 86, 93, 99, 105, 109, 113, 116, 121,
	123, 126, 128, 129, 130, 133, 143, 146, 147, 148,
	149, 159, 160, 161, 163, 166, 167, 168, 169, 170,
	173, 174, 175, 176, 177, 178, 179, 185, 188, 194,
	195, 196, 197, 198, 199, 200, 202, 203, 204, 205,
	211, 214, 220, 221, 230, 237, 240, 165, 0, 0,
	0, 0, 0, 0, 0, 0, 112, 0, 0, 0,
	0, 0, 137, 0, 0, 139, 0, 0, 209, 153,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 81, 0, 635,
	0, 0, 0, 0, 0, 0, 102, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 120, 0, 0, 0, 269, 0, 0, 0, 0,
	0, 0, 213, 122, 136, 98, 84, 94, 0, 0,
	162, 189, 193, 0, 0, 0, 106, 0, 191, 172,
	229, 0, 0, 190, 140, 219, 183, 228, 238, 239,
	216, 236, 243, 206, 87, 215, 227, 103, 201, 89,
	225, 212, 151, 131, 132, 88, 0, 187, 111, 118,
	108, 164, 222, 223, 107, 246, 95, 235, 91, 96,
	234, 158, 218, 226, 152, 145, 90, 224, 150, 144,
	135, 115, 124, 181, 142, 182, 125, 155, 154, 156,
	0, 0, 0, 210, 232, 247, 100, 0, 217, 241,
	242, 0, 0, 101, 119, 114, 180, 157, 97, 127,
	207, 134, 141, 186, 245, 171, 192, 104, 231, 208,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 83,
	92, 138, 244, 184, 117, 233, 0, 0, 0, 110,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 85, 86, 93, 99, 105, 109, 113,
	116, 121, 123, 126, 128, 129, 130, 133, 143, 146,
	147, 148, 149, 159, 160, 161, 163, 166, 167, 168,
	169, 170, 173, 174, 175, 176, 177, 178, 179, 185,
	188, 194, 195, 196, 197, 198, 199, 200, 202, 203,
	204, 205, 211, 214, 220, 221, 230, 237, 240, 165,
	0, 0, 0, 0, 0, 0, 0, 717, 112, 0,
	0, 0, 0, 0, 137, 0, 0, 139, 0, 0,
	209, 153, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 267,
	0, 0, 0, 0, 0, 0, 0, 0, 102, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 120, 0, 0, 0, 269, 0, 0,
	0, 0, 0, 0, 213, 122, 136, 98, 84, 94,
	0, 0, 162, 189, 193, 0, 0, 0, 106, 0,
	191, 172, 229, 0, 0, 190, 140, 219, 183, 228,
	238, 239, 216, 236, 243, 206, 87, 215, 227, 103,
	201, 89, 225, 212, 151, 131, 132, 88, 0, 187,
	111, 118, 108, 164, 222, 223, 107, 246, 95, 235,
	91, 96, 234, 158, 218, 226, 152, 145, 90, 224,
	150, 144, 135, 115, 124, 181, 142, 182, 125, 155,
	154, 156, 0, 0, 0, 210, 232, 247, 100, 0,
	217, 241, 242, 0, 0, 101, 119, 114, 180, 157,
	97, 127, 207, 134, 141, 186, 245, 171, 192, 104,
	231, 208, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 83, 92, 138, 244, 184, 117, 233, 0, 0,
	0, 110, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 85, 86, 93, 99, 105,
	109, 113, 116, 121, 123, 126, 128, 129, 130, 133,
	143, 146, 147, 148, 149, 159, 160, 161, 163, 166,
	167, 168, 169, 170, 173, 174, 175, 176, 177, 178,
	179, 185, 188, 194, 195, 196, 197, 198, 199, 200,
	202, 203, 204, 205, 211, 214, 220, 221, 230, 237,
	240, 383, 0, 0, 0, 0, 0, 0, 165, 0,
	0, 0, 0, 0, 0, 0, 0, 112, 0, 0,
	0, 0, 0, 137, 0, 0, 139, 0, 0, 209,
	153, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 267, 0,
	0, 0, 0, 0, 0, 0, 0, 102, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 120, 0, 0, 0, 269, 0, 0, 0,
	0, 0, 0, 213, 122, 136, 98, 84, 94, 0,
	0, 162, 189, 193, 0, 0, 0, 106, 0, 191,
	172, 229, 0, 0, 190, 140, 219, 183, 228, 238,
	239, 216, 236, 243, 206, 87, 215, 227, 103, 201,
	89, 225, 212, 151, 131, 132, 88, 0, 187, 111,
	118, 108, 164, 222, 223, 107, 246, 95, 235, 91,
	96, 234, 158, 218, 226, 152, 145, 90, 224, 150,
	144, 135, 115, 124, 181, 142, 182, 125, 155, 154,
	156, 0, 0, 0, 210, 232, 247, 100, 0, 217,
	241, 242, 0, 0, 101, 119, 114, 180, 157, 97,
	127, 207, 134, 141, 186, 245, 171, 192, 104, 231,
	208, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	83, 92, 138, 244, 184, 117, 233, 0, 0, 0,
	110, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 85, 86, 93, 99, 105, 109,
	113, 116, 121, 123, 126, 128, 129, 130, 133, 143,
	146, 147, 148, 149, 159, 160, 161, 163, 166, 167,
	168, 169, 170, 173, 174, 175, 176, 177, 178, 179,
	185, 188, 194, 195, 196, 197, 198, 199, 200, 202,
	203, 204, 205, 211, 214, 220, 221, 230, 237, 240,
	165, 0, 0, 0, 0, 0, 0, 0, 0, 112,
	0, 0, 0, 0, 0, 137, 0, 0, 139, 0,
	0, 209, 153, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	267, 0, 0, 0, 0, 0, 0, 0, 0, 102,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 120, 0, 264, 0, 269, 0,
	0, 0, 0, 0, 0, 213, 122, 136, 98, 84,
	94, 0, 0, 162, 189, 193, 0, 0, 0, 106,
	0, 191, 172, 229, 0, 0, 190, 140, 219, 183,
	228, 238, 239, 216, 236, 243, 206, 87, 215, 227,
	103, 201, 89, 225, 212, 151, 131, 132, 88, 0,
	187, 111, 118, 108, 164, 222, 223, 107, 246, 95,
	235, 91, 96, 234, 158, 218, 226, 152, 145, 90,
	224, 150, 144, 135, 115, 124, 181, 142, 182, 125,
	155, 154, 156, 0, 0, 0, 210, 232, 247, 100,
	0, 217, 241, 242, 0, 0, 101, 119, 114, 180,
	157, 97, 127, 207, 134, 141, 186, 245, 171, 192,
	104, 231, 208, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 83, 92, 138, 244, 184, 117, 233, 0,
	0, 0, 110, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 85, 86, 93, 99,
	105, 109, 113, 116, 121, 123, 126, 128, 129, 130,
	133, 143, 146, 147, 148, 149, 159, 160, 161, 163,
	166, 167, 168, 169, 170, 173, 174, 175, 176, 177,
	178, 179, 185, 188, 194, 195, 196, 197, 198, 199,
	200, 202, 203, 204, 205, 211, 214, 220, 221, 230,
	237, 240, 165, 0, 0, 0, 0, 0, 0, 0,
	0, 112, 0, 0, 0, 0, 0, 137, 0, 0,
	139, 0, 0, 209, 153, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 81, 0, 0, 0, 0, 0, 0, 0,
	0, 102, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 120, 0, 0, 0,
	269, 0, 0, 0, 0, 0, 0, 213, 122, 136,
	98, 84, 94, 0, 0, 162, 189, 193, 0, 0,
	0, 106, 0, 191, 172, 229, 0, 0, 190, 140,
	219, 183, 228, 238, 239, 216, 236, 243, 206, 87,
	215, 227, 103, 201, 89, 225, 212, 151, 131, 132,
	88, 0, 187, 111, 118, 108, 164, 222, 223, 107,
	246, 95, 235, 91, 96, 234, 158, 218, 226, 152,
	145, 90, 224, 150, 144, 135, 115, 124, 181, 142,
	182, 125, 155, 154, 156, 0, 0, 0, 210, 232,
	247, 100, 0, 217, 241, 242, 0, 0, 101, 119,
	114, 180, 157, 97, 127, 207, 134, 141, 186, 245,
	171, 192, 104, 231, 208, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 83, 92, 138, 244, 184, 117,
	233, 0, 0, 0, 110, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 85, 86,
	93, 99, 105, 109, 113, 116, 121, 123, 126, 128,
	129, 130, 133, 143, 146, 147, 148, 149, 159, 160,
	161, 163, 166, 167, 168, 169, 170, 173, 174, 175,
	176, 177, 178, 179, 185, 188, 194, 195, 196, 197,
	198, 199, 200, 202, 203, 204, 205, 211, 214, 220,
	221, 230, 237, 240, 165, 0, 0, 0, 0, 0,
	0, 0, 0, 112, 0, 0, 0, 0, 0, 137,
	0, 0, 139, 0, 0, 209, 153, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 267, 0, 0, 0, 0, 0,
	0, 0, 0, 102, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 120, 0,
	0, 0, 269, 0, 0, 0, 0, 0, 0, 213,
	122, 136, 98, 84, 94, 0, 0, 162, 189, 193,
	0, 0, 0, 106, 0, 191, 172, 229, 0, 0,
	190, 140, 219, 183, 228, 238, 239, 216, 236, 243,
	206, 87, 215, 227, 103, 201, 89, 225, 212, 151,
	131, 132, 88, 0, 187, 111, 118, 108, 164, 222,
	223, 107, 246, 95, 235, 91, 96, 234, 158, 218,
	226, 152, 145, 90, 224, 150, 144, 135, 115, 124,
	181, 142, 182, 125, 155, 154, 156, 0, 0, 0,
	210, 232, 247, 100, 0, 217, 241, 242, 0, 0,
	101, 119, 114, 180, 157, 97, 127, 207, 134, 141,
	186, 245, 171, 192, 104, 231, 208, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 83, 92, 138, 244,
	184, 117, 233, 0, 0, 0, 110, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	85, 86, 93, 99, 105, 109, 113, 116, 121, 123,
	126, 128, 129, 130, 133, 143, 146, 147, 148, 149,
	159, 160, 161, 163, 166, 167, 168, 169, 170, 173,
	174, 175, 176, 177, 178, 179, 185, 188, 194, 195,
	196, 197, 198, 199, 200, 202, 203, 204, 205, 211,
	214, 220, 221, 230, 237, 240, 165, 0, 0, 0,
	0, 0, 0, 0, 0, 112, 0, 0, 0, 0,
	0, 137, 0, 0, 139, 0, 0, 209, 153, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 324, 0, 0, 0,
	0, 0, 0, 0, 0, 102, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	120, 0, 0, 0, 269, 0, 0, 0, 0, 0,
	0, 213, 122, 136, 98, 84, 94, 0, 0, 162,
	189, 193, 0, 0, 0, 106, 0, 191, 172, 229,
	0, 0, 190, 140, 219, 183, 228, 238, 239, 216,
	236, 243, 206, 87, 215, 227, 103, 201, 89, 225,
	212, 151, 131, 132, 88, 0, 187, 111, 118, 108,
	164, 222, 223, 107, 246, 95, 235, 91, 96, 234,
	158, 218, 226, 152, 145, 90, 224, 150, 144, 135,
	115, 124, 181, 142, 182, 125, 155, 154, 156, 0,
	0, 0, 210, 232, 247, 100, 0, 217, 241, 242,
	0, 0, 101, 119, 114, 180, 157, 97, 127, 207,
	134, 141, 186, 245, 171, 192, 104, 231, 208, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 83, 92,
	138, 244, 184, 117, 233, 0, 0, 0, 110, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 85, 86, 93, 99, 105, 109, 113, 116,
	121, 123, 126, 128, 129, 130, 133, 143, 146, 147,
	148, 149, 159, 160, 161, 163, 166, 167, 168, 169,
	170, 173, 174, 175, 176, 177, 178, 179, 185, 188,
	194, 195, 196, 197, 198, 199, 200, 202, 203, 204,
	205, 211, 214, 220, 221, 230, 237, 240,
}
var yyPact = [...]int{

	205, -1000, -260, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 996, 1040, -1000, -1000, -1000, -1000, -1000, -1000,
	394, 11647, 130, 13, 104, 31, 15662, 103, 82, 16326,
	-1000, 14, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -66,
	-76, -1000, 697, -1000, -1000, -1000, -1000, -1000, 988, 992,
	853, 983, 906, -1000, 8315, 74, 74, 15330, 6987, -1000,
	-1000, 219, 16326, 98, 16326, -142, 72, 72, 72, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 774, 233,
	165, -1000, 102, 16326, 581, 579, 282, -1000, 16326, 70,
	571, 70, 70, 70, 16326, -1000, 155, -1000, -1000, -1000,
	16326, 569, 938, 3882, 52, 3882, -1000, 3882, 3882, -1000,
	3882, 21, 3882, -56, 1007, 22, -46, -1000, 3882, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 526, 950, 9655, 9655, 996, -1000, 697, -1000,
	-1000, -1000, 942, -1000, -1000, 328, 1021, -1000, 11315, 154,
	-1000, 9655, 1675, 776, -1000, -1000, 776, -1000, -1000, 138,
	-1000, -1000, 10651, 10651, 10651, 10651, 10651, 10651, 10651, 10651,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 776, -1000, 9323, 776, 776, 776,
	776, 776, 776, 776, 776, 9655, 776, 776, 776, 776,
	776, 776, 776, 776, 776, 776, 776, 776, 776, 776,
	776, 14991, 13995, 16326, 746, 733, -1000, -1000, 153, 767,
	6642, -68, -1000, -1000, -1000, 259, 13663, -1000, -1000, -1000,
	937, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 686, 16326, -1000, 234, -1000,
	566, 3882, 91, 564, 277, 563, 16326, 128, 514, -1000,
	776, -1000, -1000, 823, 15994, 967, 203, 203, 222, 532,
	-1000, -1000, 15994, 15994, 964, 962, 15994, -1000, -1000, 16326,
	3882, 3882, 3882, 28, 62, 56, 16326, 771, 78, 16326,
	976, 878, 16326, 555, 542, -1000, 6297, -1000, 3882, 3882,
	-1000, -1000, -1000, 3882, 3882, 3882, 16326, 3882, 3882, -1000,
	-1000, -1000, -1000, 3882, 3882, -1000, 1016, 275, -1000, -1000,
	-1000, -1000, 9655, 196, -1000, 875, -1000, -1000, -1000, -1000,
	-1000, -1000, 1035, 169, 598, 150, 768, -1000, 525, 988,
	526, 906, 13331, 861, -1000, -1000, -1000, 16326, -1000, 9655,
	9655, 621, -1000, 14659, -1000, -1000, 4917, 198, 10651, 479,
	448, 10651, 10651, 10651, 10651, 10651, 10651, 10651, 10651, 10651,
	10651, 10651, 10651, 10651, 10651, 10651, 434, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 538, -1000, 697, 660, 660,
	162, 162, 162, 162, 162, 162, 162, 10983, 7319, 526,
	684, 302, 9323, 8315, 8315, 9655, 9655, 8979, 8647, 8315,
	944, 238, 302, 16658, -1000, -1000, 10319, -1000, -1000, -1000,
	-1000, -1000, 526, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	15994, 15994, 8315, 8315, 8315, 8315, 42, 16326, -1000, 756,
	880, -1000, -1000, -1000, 978, 12999, 11979, 42, 724, 13995,
	16326, -1000, -1000, 13995, 16326, 4572, 5952, 767, -68, 735,
	-1000, -96, -119, 7651, 161, -1000, -1000, -1000, -1000, 3537,
	320, 622, 318, -45, -1000, -1000, -1000, 788, -1000, 788,
	788, 788, 788, -15, -15, -15, -15, -1000, -1000, -1000,
	-1000, -1000, 822, 821, -1000, 788, 788, 788, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 812, 812, 812, 807,
	807, 834, -1000, 16326, 3882, 975, 3882, -1000, -1000, 357,
	213, -176, 520, 9655, 15994, 927, -1000, 532, 532, 532,
	-1000, -1000, -1000, -1000, -1000, 15994, -1000, 766, -1000, 71,
	-1000, -1000, -1000, 16326, 16326, 16326, 16326, 16326, 111, 16326,
	16326, 764, -1000, 16326, 3882, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	16326, 289, 16326, 16326, 302, -1000, 508, 16326, -1000, 920,
	9655, 9655, 5607, 9655, -1000, -1000, -1000, 950, -1000, 944,
	990, -1000, 926, 925, 8315, -1000, -1000, 198, 272, -1000,
	-1000, 427, -1000, -1000, -1000, -1000, 145, 776, -1000, 2296,
	-1000, -1000, -1000, -1000, 479, 10651, 10651, 10651, 565, 2296,
	2232, 506, 795, 162, 411, 411, 190, 190, 190, 190,
	190, 402, 402, -1000, -1000, -1000, 526, -1000, -1000, -1000,
	526, 8315, 8315, 762, -1000, -1000, 9655, -1000, 526, 653,
	653, 492, 608, 366, 1014, 653, 281, 1009, 653, 653,
	8315, 377, -1000, 9655, 526, -1000, 144, -1000, 1047, 761,
	743, 653, 526, 653, 653, 784, 776, -1000, 16658, 13995,
	13995, 13995, 13995, 13995, -1000, 891, 890, -1000, 901, 892,
	912, 16326, -1000, 682, 12999, 192, 776, -1000, 14327, -1000,
	-1000, 1006, 13995, 705, -1000, 705, -1000, 134, -1000, -1000,
	735, -68, -75, -1000, -1000, -1000, -1000, 302, -1000, 475,
	732, 3192, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 523,
	-1000, 960, -1000, 948, -1000, 303, -58, -1000, -1000, 460,
	-15, -15, -1000, -1000, 161, 936, 161, 161, 161, 504,
	504, -1000, -1000, -1000, -1000, 456, -1000, -1000, -1000, 425,
	-1000, 864, 15994, 3882, -1000, -1000, -1000, -1000, -1000, 16658,
	676, -176, 469, 659, -1000, 788, 34, -1000, -1000, -1000,
	-1000, 15994, 263, -1000, 41, 830, -1000, -1000, -1000, -1000,
	12, 26, 77, -1000, 3882, -1000, 275, -1000, 498, 9655,
	-1000, -1000, -1000, -1000, 914, 302, 302, 129, -1000, -1000,
	16326, -1000, -1000, -1000, -1000, 765, -1000, -1000, -1000, 4227,
	8315, -1000, 565, 2296, 2182, -1000, 10651, 10651, -1000, -1000,
	653, 653, 8315, 302, -1000, -1000, -1000, 337, 434, 337,
	10651, 10651, -1000, 10651, 10651, -1000, -154, 736, 225, -1000,
	9655, 552, -1000, 5607, -1000, 10651, 10651, -1000, -1000, -1000,
	-1000, 862, 16658, 776, -1000, 12655, 15994, 741, -1000, 256,
	880, 819, 860, 721, -1000, -1000, -1000, -1000, 889, -1000,
	863, -1000, -1000, -1000, -1000, -1000, 97, 94, 83, 15994,
	-1000, 996, 9655, 705, -1000, -1000, 175, -1000, -1000, -125,
	-126, -1000, -1000, -1000, 3537, -1000, 3537, 57, 811, 859,
	10651, -1000, -1000, -1000, 620, 161, 161, -1000, 224, -1000,
	-1000, -1000, 651, -1000, 649, 728, 645, 16326, -1000, -1000,
	-1000, 520, -1000, -1000, -1000, 149, 15994, -1000, 32, -1000,
	16326, -1000, -1000, -1000, 15994, -162, 516, 15994, 15994, 15994,
	16326, -1000, 289, -1000, 302, -1000, 5262, -1000, 1006, 13995,
	-1000, -1000, 526, -1000, 10651, 2296, 2296, -1000, -1000, -1000,
	526, 788, 788, -1000, 788, 807, -1000, 788, 4, 788,
	2, 526, 526, 2090, 2063, 1860, 1842, 776, -149, -1000,
	302, 9655, -1000, 1804, 752, -1000, 969, 693, 641, -1000,
	-1000, 7983, 526, 630, 127, 627, 996, 16658, 9655, -1000,
	-1000, 9655, 787, -1000, 9655, -1000, -1000, -1000, 776, 776,
	776, 627, 988, 302, -1000, -1000, -1000, -1000, 3192, -1000,
	-1000, 15994, -40, 1029, 2296, -1000, -1000, -1000, -1000, -1000,
	-15, 496, -15, 400, -1000, 396, 3882, -176, 149, -1000,
	513, 249, 495, -1000, 776, -1000, -1000, 971, -1000, 5262,
	-1000, -1000, 778, 831, -1000, -1000, -1000, 1004, 703, -1000,
	2296, -1000, -1000, 116, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 10651, 10651, 10651, 10651, 10651, 526, 487, 302,
	10651, 10651, 958, -1000, 776, -1000, -1000, 852, 15994, 15994,
	-1000, 988, -1000, 302, 302, 15994, 302, 15994, 15994, 15994,
	12311, -1000, 618, -1000, 210, -1000, -97, 161, -1000, 161,
	601, 584, -1000, -1000, -1000, -1000, 338, -1000, -1000, 9987,
	776, 669, -1000, 232, 15994, 16326, 1001, 991, -1000, -1000,
	1047, 1047, 1047, 1047, 30, -1000, -1000, 1047, 1047, 1027,
	-1000, 776, -1000, 697, 120, -1000, -1000, 599, 596, 596,
	596, 192, 54, 15994, 312, 956, -1000, 955, -1000, -1000,
	-1000, -1000, -1000, -1000, 1047, 526, 39, 5262, 3537, 588,
	-1000, -1000, 9655, 9655, -1000, -1000, -1000, -1000, 526, 55,
	-165, -1000, -1000, 16658, 641, 526, 15994, -1000, -1000, -1000,
	-1000, -1000, 16326, -1000, -1000, 403, -1000, -1000, -1000, -1000,
	561, -1000, -1000, -1000, 830, 302, 637, -1000, 913, -159,
	-171, 633, -1000, -1000, 722, -1000, -1000, 39, -162, -1000,
	910, -1000, 15994, -1000, -1000, -163, 536, -169, 856, -172,
	848, -1000, 1031, -1000, -1000, 1025, 188, 188, -1000, -1000,
	-1000, 63, 454, -1000, -1000, -1000, -1000,
}
var yyPgo = [...]int{

	0, 1269, 21, 536, 1266, 1265, 1264, 1263, 1260, 1259,
	1258, 1255, 1254, 1253, 1249, 1248, 1246, 1245, 1244, 1243,
	1242, 1237, 1234, 1233, 1228, 1226, 1225, 92, 1224, 1223,
	1221, 72, 1220, 77, 1217, 1216, 47, 424, 55, 46,
	142, 1215, 28, 60, 57, 1213, 42, 1212, 1211, 78,
	1210, 1204, 56, 1203, 1201, 1544, 1200, 66, 1199, 12,
	30, 1198, 1194, 1193, 1191, 86, 1814, 1190, 1189, 15,
	1186, 1185, 104, 1184, 59, 9, 14, 17, 19, 1182,
	145, 6, 1181, 58, 1179, 1178, 1176, 1175, 27, 1173,
	64, 1168, 23, 61, 1167, 7, 70, 39, 26, 8,
	87, 67, 1163, 25, 76, 53, 1158, 1153, 509, 1135,
	1134, 49, 1133, 1132, 29, 1131, 97, 452, 63, 1129,
	50, 1128, 43, 0, 357, 10, 80, 1127, 1126, 1125,
	1002, 48, 54, 18, 1124, 36, 1511, 41, 1122, 1121,
	44, 1111, 1106, 1105, 1103, 1102, 1100, 1098, 33, 1097,
	1095, 1093, 16, 45, 1091, 1090, 71, 31, 1089, 1088,
	1087, 51, 52, 1081, 24, 65, 1078, 102, 62, 1076,
	1074, 1073, 81, 1071, 1065, 1064, 34, 11, 1063, 35,
	1062, 20, 1061, 38, 1060, 3, 1059, 13, 1058, 1,
	1057, 4, 5, 1056, 2, 1052, 1049, 1642, 601, 89,
	1046, 96,
}
var yyR1 = [...]int{

	0, 195, 196, 196, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 2, 6, 3, 4,
	4, 5, 5, 7, 7, 30, 30, 8, 9, 9,
	9, 9, 199, 199, 49, 49, 50, 50, 96, 96,
	10, 10, 10, 10, 101, 101, 105, 105, 105, 106,
	106, 106, 106, 138, 138, 11, 11, 11, 11, 11,
	11, 11, 191, 191, 190, 189, 189, 188, 188, 187,
	17, 170, 174, 174, 171, 171, 171, 171, 162, 141,
	141, 141, 141, 144, 144, 142, 142, 142, 142, 142,
	142, 142, 142, 142, 143, 143, 143, 143, 143, 145,
	145, 145, 145, 145, 146, 146, 146, 146, 146, 146,
	146, 146, 146, 146, 146, 146, 146, 146, 146, 147,
	147, 147, 147, 147, 147, 147, 147, 161, 161, 148,
	148, 156, 156, 157, 157, 157, 154, 154, 155, 155,
	158, 158, 158, 150, 150, 151, 151, 159, 159, 152,
	152, 152, 153, 153, 153, 160, 160, 160, 160, 160,
	149, 149, 165, 165, 182, 182, 181, 181, 181, 169,
	169, 178, 178, 178, 178, 178, 178, 167, 167, 168,
	168, 180, 180, 179, 166, 166, 183, 183, 183, 183,
	193, 194, 192, 192, 192, 192, 192, 175, 175, 175,
	176, 176, 176, 177, 177, 177, 163, 163, 18, 164,
	164, 164, 118, 118, 172, 172, 172, 172, 172, 172,
	172, 172, 173, 173, 12, 12, 12, 12, 12, 12,
	12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
	12, 186, 184, 184, 185, 185, 13, 19, 19, 14,
	14, 14, 14, 14, 15, 15, 20, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 112, 112, 110, 110, 113,
	113, 111, 111, 111, 114, 114, 114, 115, 115, 139,
	139, 139, 22, 22, 24, 24, 25, 26, 23, 23,
	23, 23, 23, 23, 23, 16, 200, 27, 28, 28,
	29, 29, 29, 33, 33, 33, 31, 31, 31, 32,
	32, 38, 38, 37, 37, 39, 39, 39, 39, 127,
	127, 127, 126, 126, 41, 41, 42, 42, 43, 43,
	44, 44, 44, 44, 58, 58, 95, 95, 97, 97,
	45, 45, 45, 45, 46, 46, 47, 47, 48, 48,
	134, 134, 133, 133, 133, 132, 132, 51, 51, 51,
	53, 52, 52, 52, 52, 54, 54, 56, 56, 55,
	55, 57, 59, 59, 59, 59, 60, 60, 40, 40,
	40, 40, 40, 40, 40, 109, 109, 62, 62, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 73,
	73, 73, 73, 73, 73, 63, 63, 63, 63, 63,
	63, 63, 36, 36, 74, 74, 74, 80, 75, 75,
	66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
	66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
	66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
	66, 66, 70, 70, 70, 70, 68, 68, 68, 68,
	68, 68, 68, 68, 68, 68, 68, 68, 68, 69,
	69, 69, 69, 69, 69, 69, 69, 69, 69, 69,
	69, 69, 69, 69, 69, 201, 201, 72, 71, 71,
	71, 71, 71, 71, 34, 34, 34, 34, 34, 137,
	137, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 84, 84, 35, 35, 82, 82,
	83, 85, 85, 81, 81, 81, 65, 65, 65, 65,
	65, 65, 65, 65, 67, 67, 67, 86, 86, 87,
	87, 88, 88, 89, 89, 90, 91, 91, 91, 92,
	92, 92, 92, 93, 93, 93, 64, 64, 64, 64,
	64, 64, 94, 94, 94, 94, 98, 98, 76, 76,
	78, 78, 77, 79, 99, 99, 103, 100, 100, 104,
	104, 104, 104, 102, 102, 102, 129, 129, 129, 107,
	107, 116, 116, 117, 117, 108, 108, 119, 119, 119,
	120, 120, 121, 121, 121, 128, 128, 124, 124, 125,
	125, 130, 130, 131, 131, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 197, 198, 135, 136, 136, 136,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 4, 6, 7, 5, 10, 1,
	3, 1, 3, 7, 8, 1, 1, 9, 8, 7,
	6, 6, 1, 1, 1, 3, 1, 3, 0, 4,
	3, 4, 5, 4, 1, 3, 3, 2, 2, 2,
	2, 2, 1, 1, 1, 2, 2, 8, 4, 6,
	5, 5, 0, 2, 1, 0, 2, 1, 3, 3,
	4, 4, 2, 4, 1, 3, 3, 3, 8, 3,
	1, 1, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 2, 2, 2, 1,
	2, 2, 2, 1, 4, 4, 2, 2, 3, 3,
	3, 3, 1, 1, 1, 1, 1, 6, 6, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 0,
	3, 0, 5, 0, 3, 5, 0, 1, 0, 1,
	0, 1, 2, 0, 2, 0, 3, 0, 1, 0,
	3, 3, 0, 2, 2, 0, 2, 1, 2, 1,
	0, 2, 5, 4, 1, 2, 2, 3, 2, 0,
	1, 2, 3, 3, 3, 2, 2, 1, 1, 0,
	1, 1, 3, 2, 3, 1, 10, 11, 11, 12,
	3, 3, 1, 1, 2, 2, 2, 0, 1, 3,
	1, 2, 3, 1, 1, 1, 2, 4, 4, 0,
	1, 2, 0, 1, 4, 5, 2, 5, 3, 3,
	4, 3, 1, 3, 2, 3, 4, 7, 7, 4,
	5, 4, 4, 7, 5, 5, 5, 12, 7, 5,
	9, 7, 1, 3, 8, 8, 3, 3, 5, 4,
	6, 5, 4, 4, 3, 2, 3, 4, 4, 3,
	4, 4, 4, 4, 4, 4, 3, 2, 3, 3,
	2, 3, 4, 3, 7, 5, 4, 2, 4, 4,
	3, 3, 5, 2, 3, 1, 1, 0, 1, 1,
	1, 0, 2, 2, 0, 2, 2, 0, 2, 0,
	1, 1, 2, 1, 1, 2, 1, 1, 2, 2,
	2, 2, 2, 3, 3, 2, 0, 2, 0, 2,
	1, 2, 2, 0, 1, 1, 0, 1, 1, 0,
	1, 0, 1, 1, 3, 1, 2, 3, 5, 0,
	1, 2, 1, 1, 0, 2, 1, 3, 1, 1,
	1, 3, 1, 3, 3, 7, 1, 3, 1, 3,
	4, 4, 4, 3, 2, 4, 0, 1, 0, 2,
	0, 1, 0, 1, 2, 1, 1, 1, 2, 2,
	1, 2, 3, 2, 3, 2, 2, 2, 1, 1,
	3, 3, 0, 5, 5, 5, 0, 2, 1, 3,
	3, 2, 3, 1, 2, 0, 3, 1, 1, 3,
	3, 4, 4, 5, 3, 4, 5, 6, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 0, 2, 1, 1, 1, 3, 1, 3,
	1, 1, 1, 1, 1, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	2, 2, 2, 2, 2, 2, 2, 3, 1, 1,
	1, 1, 4, 5, 5, 6, 4, 4, 6, 6,
	6, 8, 8, 8, 8, 9, 7, 5, 4, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 8, 8, 0, 2, 3, 4, 4,
	4, 4, 4, 4, 0, 3, 4, 7, 3, 1,
	1, 2, 3, 3, 1, 2, 2, 1, 2, 1,
	2, 2, 1, 2, 0, 1, 0, 2, 1, 2,
	4, 0, 2, 1, 3, 5, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 0, 3, 0,
	2, 0, 3, 1, 3, 2, 0, 1, 1, 0,
	2, 4, 4, 0, 2, 4, 2, 1, 3, 5,
	4, 6, 1, 3, 3, 5, 0, 5, 1, 3,
	1, 2, 3, 1, 1, 3, 3, 1, 3, 3,
	3, 3, 3, 1, 2, 1, 1, 1, 1, 1,
	1, 0, 2, 0, 3, 0, 1, 0, 1, 1,
	1, 1, 0, 1, 1, 0, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -195, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -20, -21, -22, -24, -25, -26,
	-23, -16, -3, -4, 6, 7, -30, 9, 10, 30,
	-17, 116, -18, 117, 119, 118, 151, 120, 144, 51,
	165, 166, 168, 169, 25, 145, 146, 149, 150, 31,
	32, 122, -197, 8, 250, 55, -196, 350, -88, 15,
	-29, 5, -27, -200, -27, -27, -27, -27, -27, -170,
	-174, 55, 91, -121, 126, 73, 242, 123, 124, 130,
	-124, 58, -123, 260, 137, 294, 295, 165, 176, 170,
	197, 189, 261, 296, 138, 187, 190, 229, 136, 297,
	217, 224, 67, 168, 238, 298, 147, 185, 181, 299,
	270, 179, 27, 300, 226, 202, 301, 265, 180, 225,
	122, 302, 134, 303, 203, 207, 304, 230, 305, 306,
	307, 174, 175, 308, 232, 201, 135, 33, 262, 36,
	155, 233, 205, 309, 200, 196, 310, 311, 312, 313,
	199, 173, 195, 40, 209, 208, 210, 228, 192, 314,
	315, 316, 141, 317, 182, 18, 318, 319, 320, 321,
	322, 236, 150, 323, 324, 325, 326, 327, 328, 329,
	227, 204, 206, 157, 264, 330, 234, 178, 331, 142,
	154, 149, 237, 143, 332, 333, 334, 335, 336, 337,
	338, 169, 339, 340, 341, 342, 164, 231, 240, 39,
	214, 343, 172, 133, 344, 166, 161, 219, 193, 156,
	345, 346, 183, 184, 198, 171, 194, 167, 158, 151,
	347, 239, 215, 266, 191, 188, 162, 348, 159, 160,
	349, 220, 221, 163, 263, 235, 186, 216, -173, 121,
	118, -172, -108, 126, 242, 123, 221, 128, 124, 124,
	125, 126, 242, 123, 124, -55, -130, 58, -123, 126,
	124, 109, 190, 229, 116, 218, 226, 125, 33, 227,
	157, -139, 124, -110, 217, 220, 221, 163, 58, 231,
	230, 222, -130, 167, -135, -135, -135, -135, -135, 219,
	219, -135, -2, -92, 17, 16, -5, -3, -197, 6,
	20, 21, -33, 41, 42, -28, -39, 100, -40, -130,
	-61, 75, -66, 29, 58, -123, 23, -65, -62, -81,
	-79, -80, 109, 110, 111, 98, 99, 106, 76, 112,
	-70, -68, -69, -71, 60, 59, 68, 61, 62, 63,
	64, 69, 70, 71, -124, -77, -197, 45, 46, 251,
	252, 253, 254, 259, 255, 78, 35, 241, 249, 248,
	247, 245, 246, 243, 244, 257, 258, 129, 242, 104,
	250, -108, -108, 11, -49, -50, -55, -57, -130, -100,
	-138, 167, -104, 231, 230, -125, -102, -124, -122, 229,
	190, 228, 121, 267, 268, 74, 22, 24, 212, 77,
	109, 16, 78, 108, 251, 116, 49, 269, 243, 244,
	241, 253, 254, 242, 218, 29, 10, 271, 25, 145,
	21, 34, 102, 118, 81, 82, 148, 23, 146, 71,
	274, 275, 19, 52, 140, 11, 13, 276, 277, 14,
	129, 128, 93, 125, 47, 8, 112, 26, 90, 43,
	278, 28, 279, 280, 281, 282, 45, 91, 17, 245,
	246, 31, 283, 259, 152, 104, 50, 37, 75, 284,
	285, 69, 286, 72, 53, 73, 15, 48, 287, 153,
	288, 131, 289, 290, 92, 119, 250, 46, 291, 123,
	6, 256, 30, 144, 44, 292, 124, 80, 257, 258,
	127, 70, 5, 130, 32, 9, 51, 54, 247, 248,
	249, 35, 79, 12, 293, -171, 91, -162, 58, -55,
	125, -55, 250, -117, 129, -117, -117, 56, -118, -165,
	136, -185, 132, -178, 153, 131, 133, 134, 130, -167,
	125, 28, -118, -120, 140, 131, 153, 125, 28, 124,
	-55, 58, 58, 116, 118, 121, 53, -19, -55, -116,
	129, 58, -116, -116, -116, -55, 113, -55, 58, 30,
	-136, -197, -125, 242, 58, 157, 124, 158, 126, -136,
	-136, -136, -136, 161, 162, -136, -113, -112, 224, 225,
	219, 223, 12, 162, 219, 160, -136, -135, -135, -198,
	57, -93, 19, 31, -40, -130, -89, -90, -40, -88,
	-2, -27, 37, -31, 21, 34, 66, 11, -127, 74,
	73, 90, -126, 22, -124, 60, 113, -40, -63, 93,
	75, 91, 92, 77, 95, 94, 105, 98, 99, 100,
	101, 102, 103, 104, 96, 97, 108, 83, 84, 85,
	86, 87, 88, 89, -109, -197, -80, -197, 114, 115,
	-66, -66, -66, -66, -66, -66, -66, -66, -197, -2,
	-75, -40, -197, -197, -197, -197, -197, -197, -197, -197,
	-197, -84, -40, -197, -201, -72, -197, -201, -72, -201,
	-72, -201, -197, -201, -72, -201, -72, -201, -201, -72,
	-197, -197, -197, -197, -197, -197, -56, 26, -55, -42,
	-43, -44, -45, -58, -80, -197, -55, -55, -49, -199,
	56, 11, 54, -199, 56, 113, 56, -100, 167, -101,
	-105, 232, 234, 83, -129, -124, 60, 29, 30, 57,
	56, -55, -141, -144, -146, -145, -147, -142, -143, 187,
	188, 109, 191, 193, 194, 195, 196, 197, 198, 199,
	200, 201, 202, 30, 147, 183, 184, 185, 186, 203,
	204, 205, 206, 207, 208, 209, 210, 170, 189, 261,
	171, 172, 173, 174, 175, 176, 178, 179, 180, 181,
	182, 58, -136, 126, 58, 75, 58, -55, -172, 121,
	118, -162, -197, -197, 55, -124, 28, -167, -167, -167,
	-168, 58, -168, -124, -124, 28, 28, -97, -124, -55,
	-136, -136, -136, 159, 159, 124, 124, 164, -55, 56,
	127, -49, 23, 53, -55, 58, 58, -131, -130, -122,
	-136, -136, -136, -136, -136, -55, -136, -136, -136, -136,
	11, -111, 11, 93, -40, -115, 91, 53, 9, 93,
	56, 18, 113, 56, -91, 24, 25, -92, -198, -33,
	-67, -124, 61, 64, -32, 44, -55, -40, -40, -73,
	69, 75, 70, 71, -126, 100, -131, -125, -122, -66,
	-74, -77, -80, 65, 93, 91, 92, 77, -66, -66,
	-66, -66, -66, -66, -66, -66, -66, -66, -66, -66,
	-66, -66, -66, -137, 58, 60, 58, -65, -65, -124,
	-38, 21, 34, -37, -39, -198, 56, -198, -2, -37,
	-37, -40, -40, -81, 60, -37, -81, 60, -37, -37,
	-31, -82, -83, 79, -81, -124, -130, -198, -66, -124,
	-124, -37, -38, -37, -37, -96, 153, -55, 30, 56,
	-51, -53, -52, -54, 43, 47, 49, 44, 45, 46,
	50, -134, 22, -42, -197, -133, 153, -132, 22, -130,
	60, -96, 54, -42, -55, -42, -57, -130, 100, -104,
	-101, 56, 233, 235, 236, 53, 72, -40, -153, 108,
	-175, -176, -177, -125, 60, 61, -162, -165, -166, 139,
	-183, 140, 57, -158, 69, 75, -154, 215, -148, 55,
	-148, -148, -148, -148, -152, 190, -152, -152, -152, 55,
	55, -148, -148, -148, -156, 55, -156, -156, -157, 55,
	-157, -128, 54, -55, -136, 23, -136, -164, 274, 267,
	-163, -162, -40, -180, -179, -124, 35, -168, -168, -168,
	-124, 56, 119, -186, 154, -55, -55, -55, -55, -55,
	121, 118, -55, -55, -55, -136, -55, -114, 91, 12,
	-130, -130, 60, -55, 39, -40, -40, -131, -90, -93,
	-107, 19, 11, 35, 35, -37, 69, 70, 71, 113,
	-197, -74, -66, -66, -66, -36, 148, 74, -198, -198,
	-37, -37, 56, -40, -198, -198, -198, 56, 54, 22,
	11, 11, -198, 11, 11, -198, -198, -37, -85, -83,
	81, -40, -198, 113, -198, 56, 56, -198, -198, -198,
	-198, -64, 30, 35, -2, -197, -197, -99, -103, -81,
	-43, -44, -44, -43, -44, 43, 43, 43, 48, 43,
	48, 43, -52, -130, -198, -59, 51, 128, 52, -197,
	-132, -60, 12, -42, -60, -60, 113, -105, -106, 237,
	234, 240, 58, 60, 56, -177, 83, 58, 28, -150,
	29, 69, -155, 216, 61, -152, -152, -153, 30, -153,
	-153, -153, -161, 60, -161, 61, 61, 53, -124, -136,
	-81, 56, -198, -164, -198, 57, 56, -148, 155, -124,
	-119, -120, 127, 22, 153, -191, 54, 159, 212, 159,
	127, -136, -111, 60, -40, 40, 113, -55, -41, 11,
	100, -125, -38, -36, 74, -66, -66, -198, -198, -39,
	-140, 109, 187, 147, 185, 181, 201, 192, 214, 183,
	215, -137, -140, -66, -66, -66, -66, 260, -88, 82,
	-40, 80, -125, -66, -66, -98, 53, -99, -76, -78,
	-77, -197, -2, -94, -124, -97, -60, 56, 83, -47,
	-46, 53, 54, -48, 53, -46, 43, 43, 125, 125,
	125, -97, -88, -40, -60, 234, 238, 239, -176, -177,
	-183, 55, -151, 53, -66, 57, -153, -153, 58, 109,
	57, 56, 57, 56, 57, 56, -55, -162, -182, -181,
	54, 135, 67, -179, 156, -55, -135, -124, -189, 263,
	-190, 58, -124, -124, -124, -55, -114, -60, -42, -198,
	-66, -198, -148, -148, -148, -157, -148, 175, -148, 175,
	-198, -198, 19, 19, 19, 19, -197, -35, 256, -40,
	56, 56, 27, -98, 56, -198, -198, -198, 56, 113,
	-198, -88, -103, -40, -40, 55, -40, -197, -197, -197,
	-198, -92, -95, -124, -159, 212, 9, -152, 60, -152,
	61, 61, -136, -164, -181, 58, -169, 83, 60, -197,
	26, -188, -187, -125, 55, 54, -86, 13, -152, 58,
	-66, -66, -66, -66, -66, -198, 60, -66, -66, 28,
	-78, 35, -2, -197, -124, -124, -92, -95, -95, -95,
	-95, -133, 57, 56, -160, 131, 28, 130, -69, -153,
	-153, 57, 57, 61, -66, 152, -197, 56, 83, -95,
	-55, -87, 14, 16, -198, -198, -198, -198, -34, 93,
	263, -198, -198, 9, -76, -2, 113, 57, -198, -198,
	-198, -59, 142, -124, -149, 67, 28, 28, -198, -198,
	-184, -185, -187, -177, 57, -40, -75, -198, 261, 50,
	264, -99, -198, -124, -55, 60, -198, 56, -191, 40,
	262, 265, 55, -185, -189, 40, -95, 263, 57, 264,
	-193, -194, 53, 265, -194, 53, 10, 9, -192, 143,
	138, 141, 30, -192, 137, 29, 69,
}
var yyDef = [...]int{

	23, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 571, 0, 326, 326, 326, 326, 326, 326,
	0, 632, 0, 625, 0, 0, 0, 0, -2, 313,
	314, 0, 316, 317, 936, 936, 936, 936, 936, 0,
	0, 936, 0, 35, 36, 934, 1, 3, 579, 0,
	0, 330, 333, 328, 0, 625, 625, 0, 0, 65,
	66, 0, 0, 0, 923, 0, 623, 623, 623, 633,
	634, 637, 638, 768, 769, 770, 771, 772, 773, 774,
	775, 776, 777, 778, 779, 780, 781, 782, 783, 784,
	785, 786, 787, 788, 789, 790, 791, 792, 793, 794,
	795, 796, 797, 798, 799, 800, 801, 802, 803, 804,
	805, 806, 807, 808, 809, 810, 811, 812, 813, 814,
	815, 816, 817, 818, 819, 820, 821, 822, 823, 824,
	825, 826, 827, 828, 829, 830, 831, 832, 833, 834,
	835, 836, 837, 838, 839, 840, 841, 842, 843, 844,
	845, 846, 847, 848, 849, 850, 851, 852, 853, 854,
	855, 856, 857, 858, 859, 860, 861, 862, 863, 864,
	865, 866, 867, 868, 869, 870, 871, 872, 873, 874,
	875, 876, 877, 878, 879, 880, 881, 882, 883, 884,
	885, 886, 887, 888, 889, 890, 891, 892, 893, 894,
	895, 896, 897, 898, 899, 900, 901, 902, 903, 904,
	905, 906, 907, 908, 909, 910, 911, 912, 913, 914,
	915, 916, 917, 918, 919, 920, 921, 922, 924, 925,
	926, 927, 928, 929, 930, 931, 932, 933, 234, 222,
	222, 232, 0, 0, 0, 0, 0, 626, 0, 621,
	0, 621, 621, 621, 0, 265, 399, 641, 642, 923,
	0, 0, 0, 937, 0, 937, 277, 937, 937, 280,
	937, 0, 937, 0, 287, 0, 0, 293, 937, 310,
	311, 298, 312, 315, 318, 319, 320, 321, 322, 936,
	936, 325, 29, 583, 0, 0, 571, 31, 0, 326,
	331, 332, 336, 334, 335, 327, 0, 345, 349, 0,
	408, 0, 413, 415, -2, -2, 0, 450, 451, 452,
	453, 454, 0, 0, 0, 0, 0, 0, 0, 0,
	478, 479, 480, 481, 556, 557, 558, 559, 560, 561,
	562, 563, 417, 418, 553, 603, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 544, 0, 515, 515, 515,
	515, 515, 515, 515, 515, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 44, 46, 399, 50,
	0, 912, 607, -2, -2, 0, 0, 639, 640, -2,
	781, -2, 645, 646, 647, 648, 649, 650, 651, 652,
	653, 654, 655, 656, 657, 658, 659, 660, 661, 662,
	663, 664, 665, 666, 667, 668, 669, 670, 671, 672,
	673, 674, 675, 676, 677, 678, 679, 680, 681, 682,
	683, 684, 685, 686, 687, 688, 689, 690, 691, 692,
	693, 694, 695, 696, 697, 698, 699, 700, 701, 702,
	703, 704, 705, 706, 707, 708, 709, 710, 711, 712,
	713, 714, 715, 716, 717, 718, 719, 720, 721, 722,
	723, 724, 725, 726, 727, 728, 729, 730, 731, 732,
	733, 734, 735, 736, 737, 738, 739, 740, 741, 742,
	743, 744, 745, 746, 747, 748, 749, 750, 751, 752,
	753, 754, 755, 756, 757, 758, 759, 760, 761, 762,
	763, 764, 765, 766, 767, 0, 0, 84, 0, 82,
	0, 937, 0, 0, 0, 0, 0, 0, 0, 226,
	0, 235, 223, 0, 0, 0, 0, 0, 189, 189,
	187, 188, 0, 0, 0, 0, 0, 630, 631, 0,
	937, 937, 937, 0, 0, 0, 0, 256, 0, 0,
	0, 0, 0, 0, 0, 264, 0, 266, 937, 937,
	269, 938, 939, 937, 937, 937, 0, 937, 937, 276,
	278, 279, 281, 937, 937, 283, 0, 301, 299, 300,
	295, 296, 0, 307, 290, 291, 294, 323, 324, 30,
	935, 24, 0, 0, 580, 0, 572, 573, 576, 579,
	29, 333, 0, 339, 337, 338, 329, 0, 346, 0,
	0, 0, 350, 0, 352, 353, 0, 411, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 435, 436, 437,
	438, 439, 440, 441, 414, 0, 428, 0, 0, 0,
	470, 471, 472, 473, 474, 475, 476, 0, 341, 29,
	0, 448, 0, 0, 0, 0, 0, 0, 0, 0,
	336, 0, 545, 0, 499, 507, 0, 500, 508, 501,
	509, 502, 0, 503, 510, 504, 511, 505, 506, 512,
	0, 0, 0, 341, 0, 0, 48, 0, 398, 0,
	356, 358, 359, 360, -2, 0, 382, -2, 0, 0,
	0, 42, 43, 0, 0, 0, 0, 51, 912, 53,
	54, 0, 0, 0, 162, 616, 617, 618, 614, 207,
	0, 0, 150, 146, 90, 91, 92, 139, 94, 139,
	139, 139, 139, 159, 159, 159, 159, 122, 123, 124,
	125, 126, 0, 0, 109, 139, 139, 139, 113, 129,
	130, 131, 132, 133, 134, 135, 136, 95, 96, 97,
	98, 99, 100, 101, 102, 103, 141, 141, 141, 143,
	143, 635, 68, 0, 937, 0, 937, 80, 233, 222,
	222, 219, 0, 0, 0, 0, 181, 189, 189, 189,
	185, 190, 186, 228, 229, 0, 231, 236, 368, 218,
	239, 241, 242, 0, 0, 0, 0, 0, 0, 0,
	0, 259, 622, 0, 937, 262, 263, 400, 643, 644,
	267, 268, 270, 271, 272, 273, 274, 275, 282, 286,
	0, 304, 0, 0, 288, 289, 0, 0, 584, 0,
	0, 0, 0, 0, 575, 577, 578, 583, 32, 336,
	0, 564, 0, 0, 0, 340, 27, 409, 410, 412,
	429, 0, 431, 433, 351, 347, 0, 554, -2, 419,
	420, 444, 445, 446, 0, 0, 0, 0, 442, 424,
	0, 455, 456, 457, 458, 459, 460, 461, 462, 463,
	464, 465, 466, 469, 529, 530, 0, 467, 468, 477,
	0, 0, 0, 342, 343, 447, 0, 602, 29, 0,
	0, 0, 0, 452, 556, 0, 452, 556, 0, 0,
	0, 551, 548, 0, 0, 553, 0, 516, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 397, 0, 0,
	0, 0, 0, 0, 387, 0, 0, 390, 0, 0,
	0, 0, 381, 0, 0, 402, 0, 383, 0, 385,
	386, 406, 0, 406, 45, 406, 47, 0, 401, 608,
	52, 0, 0, 57, 58, 609, 610, 611, 612, 0,
	81, 208, 210, 213, 214, 215, 85, 86, 87, 0,
	195, 0, 83, 153, 151, 0, 148, 147, 93, 0,
	159, 159, 116, 117, 162, 0, 162, 162, 162, 0,
	0, 110, 111, 112, 104, 0, 105, 106, 107, 0,
	108, 0, 0, 937, 70, 624, 71, 224, 220, 0,
	0, 219, 0, 0, 191, 139, 0, 182, 183, 184,
	230, 0, 627, 240, 0, 72, 244, 246, 245, 249,
	0, 0, 0, 257, 937, 261, 301, 285, 0, 0,
	302, 303, 308, 292, 0, 581, 582, 0, 574, 25,
	0, 619, 620, 565, 566, 354, 430, 432, 434, 0,
	341, 421, 442, 425, 0, 422, 0, 0, 416, 482,
	0, 0, 0, 449, -2, 486, 487, 0, 0, 0,
	0, 0, 522, 0, 0, 523, 0, 571, 0, 549,
	0, 0, 498, 0, 517, 0, 0, 518, 519, 520,
	521, 596, 0, 0, -2, 0, 0, 406, 604, 0,
	357, 376, 378, 0, 373, 388, 389, 391, 0, 393,
	0, 395, 396, 361, 363, 364, 0, 0, 0, 0,
	384, 571, 0, 406, 40, 41, 0, 55, 56, 0,
	0, 62, 163, 164, 0, 211, 0, 0, 0, 155,
	0, 152, 89, 149, 0, 162, 162, 118, 0, 119,
	120, 121, 0, 137, 0, 0, 0, 0, 636, 69,
	221, 0, 225, 216, 227, 173, 0, 193, 0, 369,
	0, 936, 628, 629, 0, 75, 0, 0, 0, 0,
	0, 260, 304, 305, 306, 585, 0, 26, 406, 0,
	348, 555, 0, 423, 0, 443, 426, 483, 484, 344,
	0, 139, 139, 534, 139, 143, 537, 139, 539, 139,
	542, 0, 0, 0, 0, 0, 0, 0, 546, 497,
	552, 0, 554, 0, 0, 33, 0, 596, 586, 598,
	600, 0, 29, 0, 592, 0, 571, 0, 0, 370,
	377, 0, 0, 371, 0, 372, 392, 394, 0, 0,
	0, 0, 579, 407, 39, 59, 60, 61, 209, 212,
	194, 0, 157, 0, 154, 140, 114, 115, 160, 161,
	159, 0, 159, 0, 144, 0, 937, 219, 172, 174,
	0, 179, 0, 192, 0, 237, 238, 0, 243, 0,
	73, 74, 0, 0, 248, 258, 284, 567, 355, 485,
	427, 488, 531, 159, 535, 536, 538, 540, 541, 543,
	490, 489, 0, 0, 0, 0, 0, 0, 0, 550,
	0, 0, 0, 34, 0, 601, -2, 0, 0, 0,
	49, 579, 605, 606, 374, 0, 379, 0, 0, 0,
	382, 38, 0, 366, 165, 158, 0, 162, 138, 162,
	0, 0, 67, 217, 175, 176, 0, 180, 178, 0,
	0, 76, 77, 0, 0, 0, 569, 0, 532, 533,
	0, 0, 0, 0, 524, 496, 547, 0, 0, 0,
	599, 0, -2, 0, 594, 593, 37, 0, 0, 0,
	0, 402, 0, 0, 170, 0, 167, 169, 156, 127,
	128, 142, 145, 177, 0, 0, 0, 0, 0, 0,
	250, 28, 0, 0, 491, 493, 492, 494, 0, 0,
	0, 513, 514, 0, 589, 29, 0, 375, 403, 404,
	405, 365, 0, 367, 88, 0, 166, 168, 254, 255,
	0, 252, 78, 79, 72, 570, 568, 495, 0, 0,
	0, 597, -2, 595, 0, 171, 251, 0, 75, 525,
	0, 528, 0, 253, 247, 526, 0, 0, 196, 0,
	197, 198, 0, 527, 199, 0, 0, 0, 200, 202,
	203, 0, 0, 201, 204, 205, 206,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 76, 3, 3, 3, 103, 95, 3,
	55, 57, 100, 98, 56, 99, 113, 101, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 350,
	84, 83, 85, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 105, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 94, 3, 106,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 77, 78, 79, 80, 81, 82, 86, 87, 88,
	89, 90, 91, 92, 93, 96, 97, 102, 104, 107,
	108, 109, 110, 111, 112, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}
var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:330
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:335
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:336
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:340
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 23:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:362
		{
			setParseTree(yylex, nil)
		}
	case 24:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:368
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 25:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:376
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 26:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:380
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 27:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:386
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 28:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:393
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:399
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:403
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:409
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 32:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:413
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 33:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:420
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 34:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:432
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:444
		{
			yyVAL.str = InsertStr
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:448
		{
			yyVAL.str = ReplaceStr
		}
	case 37:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:454
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, TableExprs: yyDollar[4].tableExprs, Exprs: yyDollar[6].updateExprs, Where: NewWhere(WhereStr, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 38:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:460
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 39:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:464
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 40:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:468
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 41:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:472
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:477
		{
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:478
		{
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:482
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:486
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:492
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 47:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:496
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 48:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:501
		{
			yyVAL.partitions = nil
		}
	case 49:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:505
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:511
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 51:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:515
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 52:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:519
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 53:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:523
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:529
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 55:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:533
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 56:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:539
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(yyDollar[3].str))}
		}
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:543
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(TxReadWrite))}
		}
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:547
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(TxReadOnly))}
		}
	case 59:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:553
		{
			yyVAL.str = IsolationLevelRepeatableRead
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:557
		{
			yyVAL.str = IsolationLevelReadCommitted
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:561
		{
			yyVAL.str = IsolationLevelReadUncommitted
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:565
		{
			yyVAL.str = IsolationLevelSerializable
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:571
		{
			yyVAL.str = SessionStr
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:575
		{
			yyVAL.str = GlobalStr
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:581
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 66:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:586
		{
			// Create table [name] like [name]
			yyDollar[1].ddl.OptLike = yyDollar[2].optLike
			yyVAL.statement = yyDollar[1].ddl
		}
	case 67:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:592
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName}
		}
	case 68:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:597
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 69:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:601
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[5].tableName.ToViewName()}
		}
	case 70:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:605
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 71:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:609
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 72:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:614
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:618
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:624
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 75:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:629
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:634
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:640
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 78:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:645
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:651
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 80:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:657
		{
			yyVAL.ddl = &DDL{Action: CreateStr, Table: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 81:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:664
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 82:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:671
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[2].tableName}
		}
	case 83:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:675
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[3].tableName}
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:681
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 85:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:686
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:690
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 87:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:694
		{
			yyVAL.TableSpec.AddConstraint(yyDollar[3].constraintDefinition)
		}
	case 88:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:700
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].sqlVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 89:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:711
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 93:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:722
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].sqlVal
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:727
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:733
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:737
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:741
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:745
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:749
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:753
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:757
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:761
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:765
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:771
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:777
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 106:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:783
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:789
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:795
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:803
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:807
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 111:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:811
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:815
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:819
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 114:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:825
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 115:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:829
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:833
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:837
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 118:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:841
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 119:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:845
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 120:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:849
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 121:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:853
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:857
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:861
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:865
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:869
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:873
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 127:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:877
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 128:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:882
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:888
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:892
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:896
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:900
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:904
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:908
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:912
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:916
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:922
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 138:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:927
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 139:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:932
		{
			yyVAL.sqlVal = nil
		}
	case 140:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:936
		{
			yyVAL.sqlVal = NewIntVal(yyDollar[2].bytes)
		}
	case 141:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:941
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 142:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:945
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 143:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:953
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:957
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 145:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:963
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 146:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:971
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:975
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 148:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:980
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:984
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 150:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:990
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:994
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 152:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:998
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 153:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1003
		{
			yyVAL.optVal = nil
		}
	case 154:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1007
		{
			yyVAL.optVal = yyDollar[2].expr
		}
	case 155:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1012
		{
			yyVAL.optVal = nil
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1016
		{
			yyVAL.optVal = yyDollar[3].expr
		}
	case 157:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1021
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1025
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 159:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1030
		{
			yyVAL.str = ""
		}
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1034
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1038
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 162:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1043
		{
			yyVAL.str = ""
		}
	case 163:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1047
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 164:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1051
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 165:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1056
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 166:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1060
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1064
		{
			yyVAL.colKeyOpt = colKey
		}
	case 168:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1068
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1072
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 170:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1077
		{
			yyVAL.sqlVal = nil
		}
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1081
		{
			yyVAL.sqlVal = NewStrVal(yyDollar[2].bytes)
		}
	case 172:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1087
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 173:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1091
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1097
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 175:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1101
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 176:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1107
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 177:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1111
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1116
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 179:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1122
		{
			yyVAL.str = ""
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1126
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1132
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 182:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1136
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Spatial: true, Unique: false}
		}
	case 183:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1140
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Fulltext: true, Unique: false}
		}
	case 184:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1145
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Unique: true}
		}
	case 185:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1149
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(yyDollar[2].str), Unique: true}
		}
	case 186:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1153
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(yyDollar[2].str), Unique: false}
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1159
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1163
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 189:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1168
		{
			yyVAL.str = ""
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1172
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1178
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 192:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1182
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 193:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1188
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].sqlVal}
		}
	case 194:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1194
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Name: string(yyDollar[2].bytes), Details: yyDollar[3].constraintInfo}
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1198
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[1].constraintInfo}
		}
	case 196:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1205
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns}
		}
	case 197:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1209
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction}
		}
	case 198:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1213
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 199:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1217
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction, OnUpdate: yyDollar[12].ReferenceAction}
		}
	case 200:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1223
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 201:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1229
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1235
		{
			yyVAL.ReferenceAction = Restrict
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1239
		{
			yyVAL.ReferenceAction = Cascade
		}
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1243
		{
			yyVAL.ReferenceAction = NoAction
		}
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1247
		{
			yyVAL.ReferenceAction = SetDefault
		}
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1251
		{
			yyVAL.ReferenceAction = SetNull
		}
	case 207:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1256
		{
			yyVAL.str = ""
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1260
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 209:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1264
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1272
		{
			yyVAL.str = yyDollar[1].str
		}
	case 211:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1276
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 212:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1280
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1286
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1290
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1294
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 216:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1300
		{
			yyVAL.columnDefinitions = []*ColumnDefinition{}
			yyVAL.columnDefinitions = append(yyVAL.columnDefinitions, yyDollar[1].columnDefinition)
		}
	case 217:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1306
		{
			yyVAL.columnDefinitions = append(yyVAL.columnDefinitions, yyDollar[3].columnDefinition)
		}
	case 218:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1312
		{
			yyVAL.ddl = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, Ignore: yyDollar[2].str}
			setDDL(yylex, yyVAL.ddl)
		}
	case 219:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1318
		{
			yyVAL.empty = struct{}{}
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1319
		{
			yyVAL.empty = struct{}{}
		}
	case 221:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1320
		{
			yyVAL.empty = struct{}{}
		}
	case 222:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1324
		{
			yyVAL.empty = struct{}{}
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1328
		{
			yyVAL.empty = struct{}{}
		}
	case 224:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1334
		{
			yyVAL.alterSpec = &AlterSpec{Action: AlterAddColumn, ColumnsAdded: []*ColumnDefinition{yyDollar[3].columnDefinition}}
		}
	case 225:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1338
		{
			yyVAL.alterSpec = &AlterSpec{Action: AlterAddColumn, ColumnsAdded: yyDollar[4].columnDefinitions}
		}
	case 226:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1342
		{
			yyVAL.alterSpec = &AlterSpec{Action: AlterAddIndexOrKey, IndexAdded: yyDollar[2].indexDefinition}
		}
	case 227:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1346
		{
			// ADD CHECK is ignored by all engines, so we're skipping it here.
			yyVAL.alterSpec = nil
		}
	case 228:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1351
		{
			yyVAL.alterSpec = &AlterSpec{Action: AlterDropColumn, ColumnDropped: yyDollar[3].colIdent}
		}
	case 229:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1355
		{
			idx := yyDollar[3].colIdent
			yyVAL.alterSpec = &AlterSpec{Action: AlterDropIndexOrKey, IndexDropped: &idx}
		}
	case 230:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1360
		{
			key := yyDollar[4].colIdent
			yyVAL.alterSpec = &AlterSpec{Action: AlterDropForeignKey, ForeignKeyDropped: &key}
		}
	case 231:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1365
		{
			yyVAL.alterSpec = &AlterSpec{Action: AlterDropPrimaryKey}
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1371
		{
			yyVAL.alterSpecs = []*AlterSpec{yyDollar[1].alterSpec}
		}
	case 233:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1375
		{
			if yyDollar[3].alterSpec != nil {
				yyVAL.alterSpecs = append(yyVAL.alterSpecs, yyDollar[3].alterSpec)
			}
		}
	case 234:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1385
		{
			yyDollar[1].ddl.AlterSpecs = yyDollar[2].alterSpecs
			yyVAL.statement = yyDollar[1].ddl
		}
	case 235:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1390
		{
			yyDollar[1].ddl.AlterSpecs = []*AlterSpec{{Action: AlterAddPartition, PartitionAdded: yyDollar[3].partDef}}
			yyVAL.statement = yyDollar[1].ddl
		}
	case 236:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1395
		{
			yyDollar[1].ddl.AlterSpecs = []*AlterSpec{{Action: AlterDropPartition, PartitionsDropped: yyDollar[4].partitions}}
			yyVAL.statement = yyDollar[1].ddl
		}
	case 237:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1401
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[4].tableName}, ToTables: TableNames{yyDollar[7].tableName}}
		}
	case 238:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1406
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 239:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1411
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 240:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1415
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 241:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1419
		{
			yyVAL.statement = &DBDDL{Action: AlterStr, DBName: string(yyDollar[3].bytes)}
		}
	case 242:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1423
		{
			yyVAL.statement = &DBDDL{Action: AlterStr, DBName: string(yyDollar[3].bytes)}
		}
	case 243:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1427
		{
			yyVAL.statement = &DDL{
				Action: CreateVindexStr,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name:   NewColIdent(yyDollar[5].tableName.Name.String()),
					Type:   yyDollar[6].colIdent,
					Params: yyDollar[7].vindexParams,
				},
			}
		}
	case 244:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1439
		{
			yyVAL.statement = &DDL{
				Action: DropVindexStr,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name: NewColIdent(yyDollar[5].tableName.Name.String()),
				},
			}
		}
	case 245:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1449
		{
			yyVAL.statement = &DDL{Action: AddVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 246:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1453
		{
			yyVAL.statement = &DDL{Action: DropVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 247:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1457
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 248:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1470
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 249:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1480
		{
			yyVAL.statement = &DDL{Action: AddSequenceStr, Table: yyDollar[5].tableName}
		}
	case 250:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1484
		{
			yyVAL.statement = &DDL{
				Action: AddAutoIncStr,
				Table:  yyDollar[4].tableName,
				AutoIncSpec: &AutoIncSpec{
					Column:   yyDollar[7].colIdent,
					Sequence: yyDollar[9].tableName,
				},
			}
		}
	case 251:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1497
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1503
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 253:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1507
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 254:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1513
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 255:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1517
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 256:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1523
		{
			yyVAL.statement = yyDollar[3].ddl
		}
	case 257:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1529
		{
			yyVAL.ddl = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[1].tableName}, ToTables: TableNames{yyDollar[3].tableName}}
		}
	case 258:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1533
		{
			yyVAL.ddl = yyDollar[1].ddl
			yyVAL.ddl.FromTables = append(yyVAL.ddl.FromTables, yyDollar[3].tableName)
			yyVAL.ddl.ToTables = append(yyVAL.ddl.ToTables, yyDollar[5].tableName)
		}
	case 259:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1541
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: yyDollar[4].tableNames, IfExists: exists}
		}
	case 260:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1549
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName}
		}
	case 261:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1554
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: TableNames{yyDollar[4].tableName.ToViewName()}, IfExists: exists}
		}
	case 262:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1562
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 263:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1566
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 264:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1572
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 265:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1576
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 266:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1581
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName}
		}
	case 267:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1587
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 268:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1592
		{
			yyVAL.statement = &Show{Type: CharsetStr}
		}
	case 269:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1596
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 270:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1600
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 271:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1605
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 272:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1609
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 273:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1613
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Table: yyDollar[4].tableName}
		}
	case 274:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1617
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 275:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1621
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 276:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1625
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 277:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1629
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 278:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1633
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 279:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1637
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 280:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1641
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 281:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1645
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 282:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1649
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 283:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1653
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 284:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1657
		{
			showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName}
		}
	case 285:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1662
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[3].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[3].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[4].str, Filter: yyDollar[5].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[3].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 286:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1672
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 287:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1676
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 288:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1680
		{
			// Cannot dereference $4 directly, or else the parser stackcannot be pooled. See yyParsePooled
			showCollationFilterOpt := yyDollar[4].expr
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: &showCollationFilterOpt}
		}
	case 289:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1686
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{Scope: string(yyDollar[2].bytes), Type: string(yyDollar[3].bytes), ShowTablesOpt: showTablesOpt}
		}
	case 290:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1691
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 291:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1695
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 292:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1699
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), OnTable: yyDollar[5].tableName}
		}
	case 293:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1703
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 294:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1717
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1723
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1727
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 297:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1733
		{
			yyVAL.str = ""
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1737
		{
			yyVAL.str = "full "
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1743
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1747
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 301:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1753
		{
			yyVAL.str = ""
		}
	case 302:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1757
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 303:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1761
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 304:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1767
		{
			yyVAL.showFilter = nil
		}
	case 305:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1771
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 306:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1775
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 307:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1781
		{
			yyVAL.showFilter = nil
		}
	case 308:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1785
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 309:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1791
		{
			yyVAL.str = ""
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1795
		{
			yyVAL.str = SessionStr
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1799
		{
			yyVAL.str = GlobalStr
		}
	case 312:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1805
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1809
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1815
		{
			yyVAL.statement = &Begin{}
		}
	case 315:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1819
		{
			yyVAL.statement = &Begin{}
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1825
		{
			yyVAL.statement = &Commit{}
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1831
		{
			yyVAL.statement = &Rollback{}
		}
	case 318:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1837
		{
			yyVAL.statement = &OtherRead{}
		}
	case 319:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1841
		{
			yyVAL.statement = &OtherRead{}
		}
	case 320:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1845
		{
			yyVAL.statement = &OtherRead{}
		}
	case 321:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1849
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 322:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1853
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 323:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1857
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 324:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1861
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 325:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1867
		{
			yyVAL.statement = &DDL{Action: FlushStr}
		}
	case 326:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1871
		{
			setAllowComments(yylex, true)
		}
	case 327:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1875
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 328:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1881
		{
			yyVAL.bytes2 = nil
		}
	case 329:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1885
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1891
		{
			yyVAL.str = UnionStr
		}
	case 331:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1895
		{
			yyVAL.str = UnionAllStr
		}
	case 332:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1899
		{
			yyVAL.str = UnionDistinctStr
		}
	case 333:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1904
		{
			yyVAL.str = ""
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1908
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1912
		{
			yyVAL.str = SQLCacheStr
		}
	case 336:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1917
		{
			yyVAL.str = ""
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1921
		{
			yyVAL.str = DistinctStr
		}
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1925
		{
			yyVAL.str = DistinctStr
		}
	case 339:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1930
		{
			yyVAL.str = ""
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1934
		{
			yyVAL.str = StraightJoinHint
		}
	case 341:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1939
		{
			yyVAL.selectExprs = nil
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1943
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1949
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 344:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1953
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1959
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 346:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1963
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 347:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1967
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 348:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1971
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 349:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1976
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1980
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 351:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1984
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1991
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 354:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1996
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 355:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2000
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2006
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 357:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2010
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2020
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 361:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2024
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 362:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2028
		{
			// missed alias for subquery
			yylex.Error("Every derived table must have its own alias")
			return 1
		}
	case 363:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2034
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 364:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2040
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 365:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2044
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2050
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 367:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2054
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2060
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 369:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2064
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 370:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2077
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 371:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2081
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 372:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2085
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 373:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2089
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 374:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2095
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 375:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2097
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 376:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2101
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 377:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2103
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 378:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2107
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 379:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2109
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 380:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2112
		{
			yyVAL.empty = struct{}{}
		}
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2114
		{
			yyVAL.empty = struct{}{}
		}
	case 382:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2117
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 383:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2121
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 384:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2125
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2132
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2138
		{
			yyVAL.str = JoinStr
		}
	case 388:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2142
		{
			yyVAL.str = JoinStr
		}
	case 389:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2146
		{
			yyVAL.str = JoinStr
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2152
		{
			yyVAL.str = StraightJoinStr
		}
	case 391:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2158
		{
			yyVAL.str = LeftJoinStr
		}
	case 392:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2162
		{
			yyVAL.str = LeftJoinStr
		}
	case 393:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2166
		{
			yyVAL.str = RightJoinStr
		}
	case 394:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2170
		{
			yyVAL.str = RightJoinStr
		}
	case 395:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2176
		{
			yyVAL.str = NaturalJoinStr
		}
	case 396:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2180
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 397:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2190
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 398:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2194
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2200
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 400:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2204
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 401:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2210
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 402:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2215
		{
			yyVAL.indexHints = nil
		}
	case 403:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2219
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 404:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2223
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 405:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2227
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 406:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2232
		{
			yyVAL.expr = nil
		}
	case 407:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2236
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2242
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 409:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2246
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 410:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2250
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 411:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2254
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 412:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2258
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 413:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2262
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 414:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2266
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 415:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2272
		{
			yyVAL.str = ""
		}
	case 416:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2276
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2282
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2286
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 419:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2292
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 420:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2296
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 421:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2300
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 422:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2304
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 423:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2308
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 424:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2312
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 425:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2316
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 426:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2320
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 427:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2324
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 428:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2328
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2334
		{
			yyVAL.str = IsNullStr
		}
	case 430:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2338
		{
			yyVAL.str = IsNotNullStr
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2342
		{
			yyVAL.str = IsTrueStr
		}
	case 432:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2346
		{
			yyVAL.str = IsNotTrueStr
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2350
		{
			yyVAL.str = IsFalseStr
		}
	case 434:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2354
		{
			yyVAL.str = IsNotFalseStr
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2360
		{
			yyVAL.str = EqualStr
		}
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2364
		{
			yyVAL.str = LessThanStr
		}
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2368
		{
			yyVAL.str = GreaterThanStr
		}
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2372
		{
			yyVAL.str = LessEqualStr
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2376
		{
			yyVAL.str = GreaterEqualStr
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2380
		{
			yyVAL.str = NotEqualStr
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2384
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 442:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2389
		{
			yyVAL.expr = nil
		}
	case 443:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2393
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2399
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2403
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2407
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 447:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2413
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2419
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 449:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2423
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2429
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2433
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2437
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2441
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 454:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2445
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 455:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2449
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 456:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2453
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 457:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2457
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 458:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2461
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 459:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2465
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 460:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2469
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 461:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2473
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 462:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2477
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 463:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2481
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 464:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2485
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 465:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2489
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 466:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2493
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 467:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2497
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 468:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2501
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 469:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2505
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 470:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2509
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 471:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2513
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 472:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2517
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8mb4Str, Expr: yyDollar[2].expr}
		}
	case 473:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2521
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 474:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2529
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 475:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2543
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 476:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2547
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 477:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2551
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 482:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2569
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 483:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2573
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 484:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2577
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 485:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2581
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 486:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2591
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 487:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2595
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 488:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2599
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 489:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2603
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 490:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2607
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 491:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2611
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 492:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2615
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 493:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2619
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 494:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2623
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 495:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2627
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 496:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2631
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 497:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2635
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 498:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2639
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 499:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2649
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 500:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2653
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 501:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2657
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 502:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2662
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 503:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2667
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 504:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2672
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 505:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2678
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 506:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2683
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 507:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2688
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 508:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2692
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 509:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2696
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_time"), Fsp: yyDollar[2].expr}
		}
	case 510:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2701
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtime"), Fsp: yyDollar[2].expr}
		}
	case 511:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2706
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtimestamp"), Fsp: yyDollar[2].expr}
		}
	case 512:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2711
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_time"), Fsp: yyDollar[2].expr}
		}
	case 513:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2715
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampadd"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 514:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2719
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampdiff"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 517:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2729
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 518:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2739
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 519:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2743
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 520:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2747
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 521:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2751
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 522:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2755
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 523:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2759
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 524:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2765
		{
			yyVAL.str = ""
		}
	case 525:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2769
		{
			yyVAL.str = BooleanModeStr
		}
	case 526:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2773
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 527:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2777
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 528:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2781
		{
			yyVAL.str = QueryExpansionStr
		}
	case 529:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2787
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2791
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 531:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2797
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 532:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2801
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 533:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2805
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: string(yyDollar[3].bytes)}
		}
	case 534:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2809
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 535:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2813
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 536:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2817
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2823
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 538:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2827
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2831
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 540:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2835
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 541:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2839
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2843
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 543:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2847
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 544:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2852
		{
			yyVAL.expr = nil
		}
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2856
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 546:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2861
		{
			yyVAL.str = string("")
		}
	case 547:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2865
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 548:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2871
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 549:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2875
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 550:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2881
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 551:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2886
		{
			yyVAL.expr = nil
		}
	case 552:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2890
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 553:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2896
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 554:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2900
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 555:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2904
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2910
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 557:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2914
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 558:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2918
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 559:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2922
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 560:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2926
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 561:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2930
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 562:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2934
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 563:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2938
		{
			yyVAL.expr = &NullVal{}
		}
	case 564:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2944
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 565:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2953
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 566:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2957
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 567:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2962
		{
			yyVAL.exprs = nil
		}
	case 568:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2966
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 569:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2971
		{
			yyVAL.expr = nil
		}
	case 570:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2975
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 571:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2980
		{
			yyVAL.orderBy = nil
		}
	case 572:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2984
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 573:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2990
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 574:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2994
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 575:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3000
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 576:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3005
		{
			yyVAL.str = AscScr
		}
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3009
		{
			yyVAL.str = AscScr
		}
	case 578:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3013
		{
			yyVAL.str = DescScr
		}
	case 579:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3018
		{
			yyVAL.limit = nil
		}
	case 580:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3022
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 581:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3026
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 582:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3030
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 583:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3035
		{
			yyVAL.str = ""
		}
	case 584:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3039
		{
			yyVAL.str = ForUpdateStr
		}
	case 585:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3043
		{
			yyVAL.str = ShareModeStr
		}
	case 586:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3056
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3060
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 588:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3064
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 589:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3069
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 590:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3073
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 591:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3077
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3084
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 593:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3088
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 594:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3092
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 595:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3096
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 596:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3101
		{
			yyVAL.updateExprs = nil
		}
	case 597:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3105
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3111
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 599:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3115
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 600:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3121
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 601:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3125
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 602:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3131
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 603:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3137
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 604:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3147
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 605:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3151
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 606:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3157
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 607:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3163
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 608:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3167
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 609:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3173
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 610:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3177
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 611:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3181
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 612:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3185
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 614:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3192
		{
			yyVAL.bytes = []byte("charset")
		}
	case 616:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3199
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 617:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3203
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 618:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3207
		{
			yyVAL.expr = &Default{}
		}
	case 621:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3216
		{
			yyVAL.byt = 0
		}
	case 622:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3218
		{
			yyVAL.byt = 1
		}
	case 623:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3221
		{
			yyVAL.empty = struct{}{}
		}
	case 624:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3223
		{
			yyVAL.empty = struct{}{}
		}
	case 625:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3226
		{
			yyVAL.str = ""
		}
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3228
		{
			yyVAL.str = IgnoreStr
		}
	case 627:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3231
		{
			yyVAL.empty = struct{}{}
		}
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3233
		{
			yyVAL.empty = struct{}{}
		}
	case 629:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3235
		{
			yyVAL.empty = struct{}{}
		}
	case 630:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3239
		{
			yyVAL.empty = struct{}{}
		}
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3241
		{
			yyVAL.empty = struct{}{}
		}
	case 632:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3244
		{
			yyVAL.empty = struct{}{}
		}
	case 633:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3246
		{
			yyVAL.empty = struct{}{}
		}
	case 634:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3248
		{
			yyVAL.empty = struct{}{}
		}
	case 635:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3251
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 636:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3253
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 637:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3257
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 638:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3261
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 640:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3268
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 641:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3274
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 642:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3278
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 644:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3285
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 934:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3600
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 935:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3609
		{
			decNesting(yylex)
		}
	case 936:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3614
		{
			skipToEnd(yylex)
		}
	case 937:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3619
		{
			skipToEnd(yylex)
		}
	case 938:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3623
		{
			skipToEnd(yylex)
		}
	case 939:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3627
		{
			skipToEnd(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
